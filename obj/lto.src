	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_wait_frames
_wait_frames:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
BB0_1:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_3
	ld	(ix - 3), hl
	call	_kb_Scan
	call	_gfx_Wait
	ld	hl, (ix - 3)
	dec	hl
	jr	BB0_1
BB0_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_randomIntRange
_randomIntRange:
	call	__frameset0
	call	_rand
	push	hl
	pop	de
	ld	hl, 1
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, (ix + 9)
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__irems
	ld	de, (ix + 6)
	add	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_shuffle_deck
_shuffle_deck:
	ld	hl, -19
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 7
	lea	hl, ix - 7
	ld	(ix - 13), hl
	ld	de, 364
	lea	hl, iy
	add	hl, de
	ld	de, (hl)
	push	de
	pop	hl
	call	__imulu
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy - 7
	ld	(ix - 10), hl
	ld	de, 2
BB2_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_3
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 16), hl
	ld	(ix - 19), bc
	call	_rand
	ld	bc, (ix - 19)
	call	__irems
	ld	(ix - 19), hl
	ld	de, (ix - 13)
	ld	hl, (ix - 10)
	ld	iy, 7
	lea	bc, iy
	ldir
	ld	hl, (ix - 19)
	lea	bc, iy
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (ix - 10)
	lea	hl, iy
	ld	bc, 7
	ldir
	lea	de, iy
	ld	hl, (ix - 13)
	ld	bc, 7
	ldir
	ld	de, 2
	ld	iy, (ix - 10)
	lea	iy, iy - 7
	ld	(ix - 10), iy
	ld	bc, (ix - 16)
	jr	BB2_1
BB2_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_create_deck
_create_deck:
	ld	hl, -24
	call	__frameset
	ld	iy, (ix + 6)
	xor	a, a
	ld	hl, -64
	ld	(ix - 6), hl
	sbc	hl, hl
	lea	bc, iy + 5
	ld	iy, 13
	ld	(ix - 9), bc
	ld	c, iyl
	ld	de, -13
	ld	(ix - 3), de
BB3_1:
	ld	(ix - 13), a
	ld	b, a
	call	__bdivu
	ld	d, a
	ld	(ix - 12), de
	ld	(ix - 19), hl
	lea	bc, iy
	call	__idivu
	lea	de, iy
	push	hl
	pop	iy
	ld	bc, 104
	call	__imulu
	ld	bc, (ix - 6)
	ld	a, c
	sub	a, l
	lea	hl, iy
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	ld	hl, -12
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	push	bc
	pop	hl
	ld	de, 39
	or	a, a
	sbc	hl, de
	jp	z, BB3_17
	ld	(ix - 24), a
	ld	(ix - 23), iy
	ld	hl, (ix - 12)
	mlt	hl
	ld	d, (ix - 13)
	ld	a, d
	add	a, l
	ld	e, a
	add	a, -11
	ld	iyl, a
	ld	(ix - 20), e
	ld	a, e
	cp	a, 8
	jr	nc, BB3_4
	ld	a, d
	add	a, l
	add	a, 50
	jr	BB3_8
BB3_4:
	push	bc
	pop	hl
	ld	de, (ix - 16)
	add	hl, de
	ld	de, 17
	add	hl, de
	ld	de, 3
	or	a, a
	sbc	hl, de
	jr	nc, BB3_6
	ld	hl, 5327444
	ld	c, (ix - 24)
	call	__ishru
	ld	a, l
	jr	BB3_8
BB3_6:
	ld	a, iyl
	or	a, a
	ld	a, 75
	jr	z, BB3_8
	ld	a, 65
BB3_8:
	ld	iy, (ix - 9)
	ld	(iy - 5), a
	ld	hl, (ix - 23)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 83
	jr	c, BB3_12
	ld	hl, (ix - 3)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 72
	jr	c, BB3_12
	ld	hl, (ix - 3)
	ld	de, -13
	add	hl, de
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 67
	jr	c, BB3_12
	ld	a, 68
BB3_12:
	ld	iy, (ix - 9)
	ld	(iy - 4), a
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	push	hl
	pop	iy
	ld	de, 27
	add	iy, de
	ld	de, -13
	or	a, a
	sbc	hl, de
	ld	hl, 11
	jr	z, BB3_14
	ld	hl, 10
BB3_14:
	ld	a, (ix - 20)
	cp	a, 8
	lea	bc, iy
	jr	c, BB3_16
	push	hl
	pop	bc
BB3_16:
	ld	iy, (ix - 9)
	ld	(iy - 3), bc
	ld	(iy), 0
	ld	(iy + 1), 0
	lea	de, iy
	ld	hl, (ix - 19)
	inc	hl
	ld	bc, (ix - 3)
	inc	bc
	ld	(ix - 3), bc
	ld	a, (ix - 13)
	inc	a
	ld	bc, 8
	ld	iy, (ix - 6)
	add	iy, bc
	ld	(ix - 6), iy
	push	de
	pop	iy
	lea	iy, iy + 7
	ld	(ix - 9), iy
	ld	de, (ix - 12)
	ld	c, 13
	ld	iy, 13
	jp	BB3_1
BB3_17:
	ld	de, 364
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	add	iy, de
	ld	de, 52
	ld	(iy), de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_card
_print_card:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 15)
	ld	de, (ix + 18)
	ld	l, (ix + 11)
	bit	0, l
	jr	nz, BB4_3
	ld	a, (ix + 12)
	or	a, a
	jr	nz, BB4_3
	push	de
	push	iy
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	jr	BB4_8
BB4_3:
	ld	e, 62
	ld	c, 60
	ld	a, l
	xor	a, 1
	bit	0, a
	ld	l, e
	jr	nz, BB4_5
	ld	l, c
BB4_5:
	ld	(ix - 3), bc
	ld	(ix - 6), hl
	ld	bc, -8
	bit	0, a
	jr	nz, BB4_7
	ld	l, e
	ld	(ix - 3), hl
BB4_7:
	lea	hl, iy
	add	hl, bc
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (ix + 18)
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	de, 16
	ld	hl, (ix + 15)
	add	hl, de
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
BB4_8:
	push	hl
	call	_gfx_PrintChar
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_stats
_print_hand_stats:
	call	__frameset0
	ld	de, (ix + 15)
	ld	hl, (ix + 18)
	ld	bc, 16
	add	hl, bc
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix + 9)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (ix + 12)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_type
_print_hand_type:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 6
	ld	(ix - 3), hl
	ld	hl, (ix + 15)
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	de, (ix + 6)
	ld	bc, 10
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB6_2
	ld	iy, _switch.table.print_hand_type
	ld	bc, 3
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	jr	BB6_3
BB6_2:
	ld	hl, _.str.11
BB6_3:
	push	hl
	call	_gfx_PrintString
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, (ix + 15)
	ld	(iy + 9), hl
	ld	hl, (ix + 18)
	ld	(iy + 12), hl
	call	_print_hand_stats
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_game_stats
_display_game_stats:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 18
	ld	(ix - 3), hl
	ld	de, 10
	ld	hl, 20
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 52
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.12
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.13
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, 10
	ld	(iy + 9), hl
	ld	hl, 78
	ld	(iy + 12), hl
	call	_print_hand_type
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_hand
_display_hand:
	ld	hl, -12
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, 74
	ld	(ix - 6), hl
	ld	bc, 0
	lea	hl, iy + 9
	ld	(ix - 3), hl
BB8_1:
	ld	de, (iy + 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB8_6
	ld	(ix - 9), bc
	ld	iy, (ix - 3)
	bit	0, (iy + 5)
	jr	nz, BB8_4
	bit	0, (iy + 6)
	ld	hl, 200
	jr	z, BB8_5
BB8_4:
	ld	hl, 184
BB8_5:
	ld	(ix - 12), hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	lea	hl, iy
	ld	(ix - 3), hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	bc, 7
	ldir
	ld	hl, (ix - 6)
	ld	(iy + 9), hl
	ld	hl, (ix - 12)
	ld	(iy + 12), hl
	call	_print_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 32
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
	lea	iy, iy + 7
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	jr	BB8_1
BB8_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_cards_to_hand
_draw_cards_to_hand:
	ld	hl, -9
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB9_2
	ld	de, 0
BB9_2:
	ld	iy, (ix + 6)
	lea	hl, iy + 11
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	push	de
	pop	iy
	push	hl
	pop	bc
BB9_3:
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	z, BB9_14
	ld	(ix - 9), bc
	lea	bc, iy
	ld	(ix - 3), bc
BB9_5:
	ld	hl, (ix + 15)
	ld	hl, (hl)
	ld	de, 52
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB9_7
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 15)
	ld	(iy), hl
	ld	hl, (ix + 12)
	push	hl
	call	_shuffle_deck
	pop	hl
BB9_7:
	ld	hl, (ix + 6)
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB9_9
	ld	de, 0
BB9_9:
	ld	iy, (ix - 6)
BB9_10:
	ld	bc, (ix - 3)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB9_5
	ld	hl, (iy)
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jr	z, BB9_13
	lea	iy, iy + 7
	dec	de
	jr	BB9_10
BB9_13:
	lea	de, iy - 2
	ld	hl, (ix + 15)
	push	hl
	pop	iy
	ld	hl, (iy)
	push	hl
	pop	bc
	inc	bc
	ld	(iy), bc
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	add	hl, bc
	ld	bc, 7
	ldir
	ld	iy, (ix - 3)
	ld	bc, (ix - 9)
	inc	bc
	jp	BB9_3
BB9_14:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	de, (ix + 9)
	add	hl, de
	ld	(iy + 3), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_get_hand_type
_get_hand_type:
	ld	hl, -463
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, (ix + 12)
	ld	bc, 0
	ld	de, -1
	xor	a, a
	ld	(ix - 3), de
	push	ix
	ld	de, -408
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	(iy + 44), bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	nz, BB10_2
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	(iy), de
	ld	(iy + 3), bc
	ld	(iy + 6), bc
	jr	BB10_4
BB10_2:
	ld	de, -6
	ld	iy, 9
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, -4
	or	a, a
	sbc	hl, de
	jr	nc, BB10_5
	ld	hl, (ix + 6)
	lea	bc, iy
	push	hl
	pop	iy
	lea	de, iy
	ld	hl, _hand_table
	ldir
	ld	hl, (ix + 12)
	ld	(iy + 44), hl
	ld	bc, 7
	call	__imulu
	push	hl
	ld	hl, (ix + 9)
	push	hl
	pea	iy + 9
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB10_4:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
BB10_5:
	ld	de, -195
	lea	hl, ix
	add	hl, de
	ld	de, -435
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -404
	lea	iy, ix
	add	iy, de
	lea	hl, iy + 14
	push	ix
	ld	de, -407
	add	ix, de
	ld	(ix), hl
	pop	ix
	lea	hl, iy + 2
	push	ix
	ld	de, -438
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -411
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	lea	hl, iy
	ld	de, -457
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	bc, (ix + 12)
	dec	bc
	ld	iy, (ix + 9)
	lea	hl, iy + 7
	ld	de, -414
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, 0
	ld	hl, (ix + 9)
	ld	(ix - 3), de
	push	ix
	ld	de, -429
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -432
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
BB10_6:
	ld	de, (ix - 3)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB10_13
	push	de
	pop	iy
	inc	iy
	ex	de, hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	add	hl, de
	push	ix
	ld	de, -417
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -423
	add	ix, de
	ld	(ix), iy
	pop	ix
	lea	hl, iy
	ld	de, (ix + 12)
BB10_8:
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB10_12
	ld	(ix - 3), de
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, (hl)
	ld	de, -426
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	push	bc
	pop	hl
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (hl)
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB10_11
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -417
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	de, (ix + 12)
BB10_11:
	lea	hl, iy
	inc	hl
	ld	bc, -420
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 7
	lea	bc, iy
	jp	BB10_8
BB10_12:
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	(ix - 3), de
	push	ix
	ld	de, -432
	add	ix, de
	ld	bc, (ix)
	pop	ix
	jp	BB10_6
BB10_13:
	ld	de, -411
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(iy + 14), 0
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	hl
	pop	iy
	inc	iy
	ld	bc, 383
	lea	de, iy
	ldir
	ld	de, 1
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	dec	de
	jp	p, BB10_15
	push	de
	pop	bc
BB10_15:
	ld	iy, (ix + 9)
	inc	iy
	ld	(ix - 3), de
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	bc
	pop	hl
	ld	de, (ix - 3)
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -414
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -417
	add	ix, bc
	ld	(ix), de
	pop	ix
BB10_16:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_27
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	a, (iy - 1)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ld	de, (hl)
	inc	de
	ld	(hl), de
	ld	bc, (ix - 3)
	lea	bc, iy
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	lea	hl, iy
	ld	de, 67
	or	a, a
	sbc	hl, de
	jr	nz, BB10_19
	ld	de, -414
	jr	BB10_25
BB10_19:
	lea	hl, iy
	ld	de, 68
	or	a, a
	sbc	hl, de
	jr	nz, BB10_21
	ld	de, -417
	jr	BB10_25
BB10_21:
	lea	hl, iy
	ld	de, 72
	or	a, a
	sbc	hl, de
	jr	nz, BB10_23
	ld	de, -420
	jr	BB10_25
BB10_23:
	lea	hl, iy
	ld	de, 83
	or	a, a
	sbc	hl, de
	jr	nz, BB10_26
	ld	de, -426
BB10_25:
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
BB10_26:
	ld	de, 0
	push	bc
	pop	iy
	lea	iy, iy + 7
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	jp	BB10_16
BB10_27:
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	push	ix
	ld	bc, -417
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(iy + 11), hl
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 8), hl
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 5), hl
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 2), hl
	ld	bc, 4
	push	de
	pop	hl
	ld	(ix - 3), bc
	ld	bc, -438
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (ix - 3)
BB10_28:
	ld	(ix - 3), de
	push	ix
	ld	de, -417
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB10_31
	ld	hl, (iy)
	ld	bc, (ix + 12)
	or	a, a
	sbc	hl, bc
	jr	z, BB10_32
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, iy + 3
	ld	bc, 4
	jr	BB10_28
BB10_31:
	ld	bc, -463
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB10_33
BB10_32:
	ld	(ix - 3), de
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	hl, _.str.14
	add	hl, bc
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -463
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, (ix - 3)
BB10_33:
	ld	bc, 9
	ld	iy, ___const.get_hand_type.straight_ranks
	push	de
	pop	hl
BB10_34:
	ld	(ix - 3), de
	push	ix
	ld	de, -414
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB10_38
BB10_35:
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB10_39
	lea	hl, iy
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -407
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	bc, 9
	ld	hl, (hl)
	ld	de, (ix - 3)
	inc	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_35
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	inc	iy
	ld	de, 0
	jr	BB10_34
BB10_38:
	ld	bc, -460
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB10_40
BB10_39:
	ld	hl, ___const.get_hand_type.straight_ranks
	push	hl
	pop	iy
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	a, (iy + 4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -460
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 0
BB10_40:
	ld	hl, _.str.15
	ld	bc, -435
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (iy)
	ld	(ix - 3), de
	push	ix
	ld	de, -447
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 45)
	push	ix
	ld	de, -444
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 42)
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 39)
	push	ix
	ld	de, -438
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 36)
	ld	de, -435
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -411
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld.sis	bc, 0
	ld	(iy), c
	ld	(iy + 1), b
	ld	de, (ix - 3)
	push	de
	pop	bc
	ld	(ix - 3), bc
	ld	bc, -450
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	bc, -453
	add	ix, bc
	ld	(ix), de
	pop	ix
	xor	a, a
	push	ix
	ld	de, -454
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	bc, (ix - 3)
BB10_41:
	ld	de, -420
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB10_53
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -407
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	nz, BB10_46
	ld	(ix - 3), de
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	lea	bc, iy
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB10_45
	ld	(ix - 3), de
	ld	de, -457
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	de, (ix - 3)
	ld	(hl), e
BB10_45:
	inc	bc
	ld	de, -426
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	jr	BB10_52
BB10_46:
	lea	hl, iy
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	inc	bc
	jr	nz, BB10_48
	ld	bc, -450
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -408
	jr	BB10_50
BB10_48:
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_51
	ld	bc, -453
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	dec	bc
BB10_50:
	lea	hl, ix
	add	hl, bc
	ld	(hl), e
	push	ix
	ld	de, -426
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -420
	add	ix, de
	ld	bc, (ix)
	pop	ix
	jr	BB10_52
BB10_51:
	ld	de, -426
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, -420
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
BB10_52:
	inc	hl
	jp	BB10_41
BB10_53:
	ld	hl, (ix + 12)
	ld	de, 5
	or	a, a
	sbc	hl, de
	ld	e, -1
	ld	iyl, d
	ld	iyh, e
	jr	z, BB10_55
	ld	iyh, iyl
BB10_55:
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	l, a
	ld	a, iyh
	and	a, l
	ld	bc, -447
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB10_57
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB10_57:
	and	a, l
	ld	bc, -444
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB10_59
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB10_59:
	and	a, l
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB10_61
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB10_61:
	and	a, l
	ld	bc, -438
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB10_63
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB10_63:
	and	a, l
	ld	bc, -435
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_65
	ld	e, iyl
BB10_65:
	and	a, e
	ld	b, a
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 9
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, b
	or	a, l
	ld	l, a
	ld	a, iyh
	ex	de, hl
	ld	iyl, e
	ex	de, hl
	and	a, l
	ld	c, a
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, c
	and	a, l
	bit	0, a
	jp	z, BB10_71
	bit	0, b
	jp	nz, BB10_71
	ld	bc, 65
	ld	de, -460
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_71
	ld	de, (ix + 6)
	ld	hl, _hand_table+81
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB10_69:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB10_4
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	ld	iy, (ix + 9)
	add	iy, bc
	lea	hl, iy
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB10_69
BB10_71:
	bit	0, a
	jr	z, BB10_75
	ld	de, (ix + 6)
	ld	hl, _hand_table+72
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB10_73:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB10_4
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	ld	iy, (ix + 9)
	add	iy, bc
	lea	hl, iy
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB10_73
BB10_75:
	ld	de, -453
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 9
	jp	nz, BB10_84
	ld	de, -450
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_89
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_89
	ld	de, (ix + 6)
	ld	hl, _hand_table+54
	ldir
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB10_79:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	ld	bc, -408
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	z, BB10_82
	cp	a, e
	jr	nz, BB10_83
BB10_82:
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -429
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB10_83:
	lea	iy, iy + 7
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB10_79
BB10_84:
	ld	de, (ix + 6)
	ld	hl, _hand_table+63
	ldir
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB10_85:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	ld	bc, -454
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB10_88
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -429
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB10_88:
	lea	iy, iy + 7
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB10_85
BB10_89:
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	jp	nc, BB10_95
	ld	de, (ix + 6)
	ld	hl, _hand_table+45
	ldir
	ld	hl, (ix + 9)
	ex	de, hl
	inc	de
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB10_91:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	de
	pop	iy
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	ix
	ld	bc, -463
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	jr	nz, BB10_94
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	push	ix
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	dec	hl
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -429
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	push	ix
	ld	de, -407
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	ldir
BB10_94:
	lea	iy, iy + 7
	lea	de, iy
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	jp	BB10_91
BB10_95:
	ld	a, iyl
	bit	0, a
	jr	z, BB10_99
	ld	de, (ix + 6)
	ld	hl, _hand_table+36
	ldir
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
BB10_97:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -429
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	lea	iy, iy + 7
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	dec	de
	jr	BB10_97
BB10_99:
	ld	de, -450
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_105
	ld	de, (ix + 6)
	ld	hl, _hand_table+27
	ldir
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB10_101:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	ld	bc, -408
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB10_104
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -429
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB10_104:
	lea	iy, iy + 7
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB10_101
BB10_105:
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB10_112
	ld	de, (ix + 6)
	ld	hl, _hand_table+18
	ldir
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	a, (iy + 1)
	ld	bc, -407
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB10_107:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	z, BB10_110
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	jr	nz, BB10_111
BB10_110:
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -429
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB10_111:
	lea	iy, iy + 7
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB10_107
BB10_112:
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	jp	nz, BB10_118
	ld	de, (ix + 6)
	ld	hl, _hand_table+9
	ldir
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB10_114:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	nz, BB10_117
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -429
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB10_117:
	lea	iy, iy + 7
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB10_114
BB10_118:
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table
	ldir
	lea	de, iy + 9
	ld	bc, 7
	ld	(ix - 3), de
	ld	de, -432
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	hl, 1
	ld	(iy + 44), hl
	jp	BB10_4
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handle_draw_scoring
_handle_draw_scoring:
	ld	hl, -24
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, (ix + 12)
	ld	hl, (iy + 3)
	ld	(ix - 15), hl
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	push	de
	pop	bc
	call	pe, __setflag
	push	bc
	pop	hl
	jp	p, BB11_2
	or	a, a
	sbc	hl, hl
BB11_2:
	lea	de, ix - 9
	ld	(ix - 24), de
	dec	bc
	ld	iy, (ix + 6)
	lea	de, iy + 2
	push	bc
	pop	iy
	ld	(ix - 12), de
	ld	bc, (ix - 15)
BB11_3:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB11_7
	ld	(ix - 21), hl
	ld	hl, (ix - 12)
	ld	hl, (hl)
	add	hl, bc
	ld	(ix - 18), hl
	scf
	sbc	hl, hl
	push	hl
	ld	(ix - 15), iy
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	call	_display_hand
	pop	hl
	ld	iy, (ix - 24)
	lea	de, iy
	ld	hl, (ix + 12)
	ld	bc, 9
	ldir
	ld	hl, (ix - 18)
	ld	(ix - 6), hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	lea	hl, iy
	ld	bc, 9
	ldir
	ld	hl, (ix + 27)
	push	hl
	ld	hl, (ix + 24)
	push	hl
	ld	hl, (ix + 21)
	push	hl
	ld	hl, (ix + 18)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, (ix - 15)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 500
	jr	z, BB11_6
	ld	hl, 250
BB11_6:
	push	hl
	call	_wait_frames
	pop	hl
	ld	iy, (ix - 12)
	lea	iy, iy + 7
	ld	(ix - 12), iy
	ld	iy, (ix - 15)
	dec	iy
	ld	hl, (ix - 21)
	dec	hl
	ld	bc, (ix - 18)
	jp	BB11_3
BB11_7:
	ld	iy, (ix + 12)
	ld	hl, (iy + 6)
	call	__imulu
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -584
	call	__frameset
	ld	bc, -523
	lea	iy, ix
	add	iy, bc
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	hl, 0
	ld	de, 4
	push	ix
	ld	bc, -557
	add	ix, bc
	ld	(ix), de
	pop	ix
	dec	de
	push	ix
	ld	bc, -554
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -373
	add	ix, bc
	lea	de, ix
	pop	ix
	push	ix
	ld	bc, -538
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 85
	push	ix
	ld	bc, -526
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 47
	push	ix
	ld	bc, -545
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy
	ld	bc, -541
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	hl
	call	_time
	pop	de
	push	hl
	call	_srand
	pop	hl
	call	_gfx_Begin
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -538
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_create_deck
	pop	hl
	ld	bc, -538
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_shuffle_deck
	pop	hl
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 3
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 88), 0
	push	hl
	pop	de
	inc	de
	ld	bc, 61
	ldir
	ld	hl, 8
	push	ix
	ld	bc, -532
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	(iy + 85), hl
	ld	iy, 11
	ld	de, 67
BB12_1:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	z, BB12_3
	lea	bc, iy
	lea	de, iy
	ld	(ix - 3), de
	ld	de, -526
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	add	iy, bc
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	de, (ix - 3)
	push	de
	pop	iy
	ld	de, 67
	ld	bc, 7
	add	iy, bc
	jr	BB12_1
BB12_3:
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	or	a, a
	sbc	hl, hl
	ld	(iy + 82), hl
	ld	bc, -526
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	de, iy + 15
	ld	bc, -566
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	bc, -551
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	pop	iy
	push	ix
	ld	bc, -563
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -548
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	pop	de
	xor	a, a
	ld	c, a
	inc	l
BB12_4:
	ld	a, l
	and	a, 1
	bit	0, a
	jp	z, BB12_57
	ld	(ix - 3), de
	push	ix
	ld	de, -572
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	de, -560
	lea	iy, ix
	add	iy, de
	ld	(iy), c
	ld	de, (ix - 3)
	push	ix
	ld	bc, -535
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -542
	add	ix, bc
	ld	(ix), l
	pop	ix
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (_frame_timer)
	inc	hl
	ld	(_frame_timer), hl
	call	_kb_Scan
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 88)
	push	de
	pop	hl
	ld	(ix - 3), de
	ld	de, -532
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB12_7
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pea	iy + 82
	ld	bc, -538
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	push	hl
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_draw_cards_to_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB12_7:
	ld	hl, -720878
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -578
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	(iy + 14), 1
	ld	de, (ix - 3)
	ld	bc, -569
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	a, e
	bit	5, a
	jp	z, BB12_15
	ld	bc, -548
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	bit	5, a
	jp	nz, BB12_15
	ld	de, -535
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -532
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	a, (iy + 15)
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, (iy + 91)
	bit	0, a
	jr	nz, BB12_12
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB12_12
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 1
	ld	hl, 1
	jr	BB12_14
BB12_12:
	bit	0, a
	jr	z, BB12_15
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 0
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	hl, -1
	jp	m, BB12_15
BB12_14:
	add	hl, de
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 91), hl
BB12_15:
	ld	de, -529
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	bc, (iy + 85)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	de, -532
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jp	p, BB12_17
	ld	bc, 0
BB12_17:
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), bc
	ld	bc, -569
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	l, e
	ld	h, d
	push	ix
	ld	de, -548
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	de, -575
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -566
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld	de, 0
BB12_18:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB12_22
	bit	0, (iy)
	jp	z, BB12_21
	lea	hl, iy - 6
	ld	(ix - 3), bc
	push	ix
	ld	bc, -584
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	de
	pop	hl
	inc	hl
	push	ix
	ld	bc, -581
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ex	de, hl
	ld	bc, (ix - 3)
	push	ix
	ld	de, -569
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -545
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ex	de, hl
	ld	bc, -584
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, (ix - 3)
	ld	bc, 7
	ldir
	ld	de, -569
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -581
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB12_21:
	lea	iy, iy + 7
	dec	bc
	jp	BB12_18
BB12_22:
	push	de
	ld	bc, -545
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -541
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_get_hand_type
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -720874
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	bc, -569
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	jp	z, BB12_31
	ld	bc, -551
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	a, e
	bit	7, a
	jr	nz, BB12_31
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 91)
	ld	bc, -554
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_31
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_31
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 88)
	ld	bc, -575
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -566
	add	ix, bc
	ld	iy, (ix)
	pop	ix
BB12_27:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB12_41
	bit	0, (iy)
	jr	z, BB12_30
	ld	bc, -1
	ld	(iy - 4), bc
	ld	(iy), 0
	ld	(iy - 1), 0
	dec	de
BB12_30:
	lea	iy, iy + 7
	dec	hl
	jr	BB12_27
BB12_31:
	ld	de, -532
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	ld	bc, -572
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
BB12_32:
	ld	bc, (ix - 3)
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	(ix - 3), bc
	ld	bc, -572
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	ld	bc, (ix - 3)
	jp	z, BB12_44
	ld	a, e
	bit	7, a
	jp	nz, BB12_44
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 91)
	ld	bc, -557
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_43
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_43
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 88)
	ld	bc, -566
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	push	ix
	ld	bc, -575
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB12_37:
	push	hl
	pop	bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB12_42
	bit	0, (iy)
	jr	z, BB12_40
	scf
	sbc	hl, hl
	ld	(iy - 4), hl
	ld	(iy), 0
	ld	(iy - 1), 0
	dec	de
BB12_40:
	lea	iy, iy + 7
	push	bc
	pop	hl
	dec	hl
	jr	BB12_37
BB12_41:
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 88), de
	or	a, a
	sbc	hl, hl
	ld	(iy + 91), hl
	ld	de, -554
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	dec	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -532
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -572
	add	ix, bc
	ld	de, (ix)
	pop	ix
	jp	BB12_32
BB12_42:
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 88), de
	or	a, a
	sbc	hl, hl
	ld	(iy + 91), hl
	ld	de, -557
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	dec	bc
	ld	hl, (iy + 44)
	ld	(ix - 3), bc
	ld	bc, -554
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	ld	bc, (ix - 3)
	push	ix
	ld	de, -557
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	bc
	ld	de, 0
	push	de
	push	ix
	ld	bc, -563
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -526
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -541
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	push	iy
	push	hl
	pea	iy + 9
	call	_handle_draw_scoring
	ld	iy, 24
	add	iy, sp
	ld	sp, iy
	ld	bc, -563
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	push	ix
	ld	de, -563
	add	ix, de
	ld	(ix), hl
	pop	ix
BB12_43:
	ld	de, -532
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
BB12_44:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, iyl
	ld	de, -560
	lea	hl, ix
	add	hl, de
	bit	1, a
	jr	nz, BB12_46
	ld	l, (hl)
	jr	BB12_50
BB12_46:
	ld	l, (hl)
	bit	1, l
	jr	nz, BB12_50
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_49
	dec	de
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	de, -578
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy + 14), 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
BB12_49:
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	l, (hl)
	push	ix
	ld	de, -532
	add	ix, de
	ld	bc, (ix)
	pop	ix
BB12_50:
	ld	a, iyl
	bit	2, a
	push	ix
	ld	de, -575
	push	af
	add	ix, de
	pop	af
	ld	(ix), iy
	pop	ix
	jr	z, BB12_54
	bit	2, l
	jr	nz, BB12_54
	push	bc
	pop	de
	dec	de
	ld	(ix - 3), de
	ld	de, -535
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB12_54
	push	bc
	pop	de
	inc	de
	push	bc
	pop	hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	ld	(iy + 14), 0
	ld	de, (ix - 3)
	ld	bc, -535
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
BB12_54:
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -541
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	bc, -554
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -563
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB12_56
	xor	a, a
	ld	bc, -542
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
BB12_56:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	push	bc
	pop	de
	ld	(ix - 3), bc
	ld	bc, -569
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	e, l
	ld	d, h
	ld	bc, -551
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	de, -572
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	ld	bc, (ix - 3)
	ld	c, l
	ld	b, h
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	call	_gfx_SwapDraw
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -575
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	c, l
	ld	de, -542
	lea	hl, ix
	add	hl, de
	ld	l, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -535
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
	jp	BB12_4
BB12_57:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_frame_timer
_frame_timer:
	rb	3

	section	.data,"aw",@progbits
	public	_hand_table
_hand_table:
	dl	0
	dl	5
	dl	1
	dl	1
	dl	10
	dl	2
	dl	2
	dl	20
	dl	2
	dl	3
	dl	30
	dl	3
	dl	4
	dl	30
	dl	4
	dl	5
	dl	35
	dl	4
	dl	6
	dl	40
	dl	4
	dl	7
	dl	60
	dl	7
	dl	8
	dl	100
	dl	8
	dl	9
	dl	100
	dl	8

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	" x ", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"High Card", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"Two Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"Three of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"Straight", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"Full House", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"Four of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"Straight Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"Royal Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"H: ", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	" D: ", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"SHCD", 0

	section	.rodata,"a",@progbits
	private	___const.get_hand_type.straight_ranks
___const.get_hand_type.straight_ranks:
	db	"23456789TJQKA"

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"23456789TJQKA", 0

	section	.rodata,"a",@progbits
	private	_switch.table.print_hand_type
_switch.table.print_hand_type:
	dl	_.str.1
	dl	_.str.2
	dl	_.str.3
	dl	_.str.4
	dl	_.str.5
	dl	_.str.6
	dl	_.str.7
	dl	_.str.8
	dl	_.str.9
	dl	_.str.10

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	__Unwind_SjLj_Register
	extern	_gfx_PrintChar
	extern	_srand
	extern	_gfx_Begin
	extern	_rand
	extern	_gfx_PrintString
	extern	_memcpy
	extern	_gfx_PrintInt
	extern	__idivu
	extern	__setflag
	extern	__bdivu
	extern	_time
	extern	__frameset
	extern	_kb_Scan
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	_gfx_FillScreen
	extern	__irems
	extern	__Unwind_SjLj_Unregister
	extern	__imulu
	extern	_gfx_Wait
	extern	_gfx_SetColor
	extern	_gfx_End
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
