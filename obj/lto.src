	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_card_equal
_card_equal:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, 0
	push	hl
	pop	bc
	ld	l, (hl)
	ld	a, (iy)
	cp	a, l
	jr	nz, BB0_5
	ld	iy, (ix + 6)
	ld	hl, (iy + 2)
	push	bc
	pop	iy
	ld	bc, (iy + 2)
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_5
	ld	l, (iy + 1)
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	cp	a, l
	jr	z, BB0_4
	ld	de, 0
	jr	BB0_5
BB0_4:
	ld	de, 1
BB0_5:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_wait_frames
_wait_frames:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
BB1_1:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB1_3
	ld	(ix - 3), hl
	call	_kb_Scan
	call	_gfx_Wait
	ld	hl, (ix - 3)
	dec	hl
	jr	BB1_1
BB1_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_randomIntRange
_randomIntRange:
	call	__frameset0
	call	_rand
	push	hl
	pop	de
	ld	hl, 1
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, (ix + 9)
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__irems
	ld	de, (ix + 6)
	add	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_shuffle_deck
_shuffle_deck:
	ld	hl, -19
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 7
	lea	hl, ix - 7
	ld	(ix - 13), hl
	ld	de, 364
	lea	hl, iy
	add	hl, de
	ld	de, (hl)
	push	de
	pop	hl
	call	__imulu
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy - 7
	ld	(ix - 10), hl
	ld	de, 2
BB3_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_3
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 16), hl
	ld	(ix - 19), bc
	call	_rand
	ld	bc, (ix - 19)
	call	__irems
	ld	(ix - 19), hl
	ld	de, (ix - 13)
	ld	hl, (ix - 10)
	ld	iy, 7
	lea	bc, iy
	ldir
	ld	hl, (ix - 19)
	lea	bc, iy
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (ix - 10)
	lea	hl, iy
	ld	bc, 7
	ldir
	lea	de, iy
	ld	hl, (ix - 13)
	ld	bc, 7
	ldir
	ld	de, 2
	ld	iy, (ix - 10)
	lea	iy, iy - 7
	ld	(ix - 10), iy
	ld	bc, (ix - 16)
	jr	BB3_1
BB3_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_create_deck
_create_deck:
	ld	hl, -24
	call	__frameset
	ld	iy, (ix + 6)
	xor	a, a
	ld	hl, -64
	ld	(ix - 6), hl
	sbc	hl, hl
	lea	bc, iy + 5
	ld	iy, 13
	ld	(ix - 9), bc
	ld	c, iyl
	ld	de, -13
	ld	(ix - 3), de
BB4_1:
	ld	(ix - 13), a
	ld	b, a
	call	__bdivu
	ld	d, a
	ld	(ix - 12), de
	ld	(ix - 19), hl
	lea	bc, iy
	call	__idivu
	lea	de, iy
	push	hl
	pop	iy
	ld	bc, 104
	call	__imulu
	ld	bc, (ix - 6)
	ld	a, c
	sub	a, l
	lea	hl, iy
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	ld	hl, -12
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	push	bc
	pop	hl
	ld	de, 39
	or	a, a
	sbc	hl, de
	jp	z, BB4_17
	ld	(ix - 24), a
	ld	(ix - 23), iy
	ld	hl, (ix - 12)
	mlt	hl
	ld	d, (ix - 13)
	ld	a, d
	add	a, l
	ld	e, a
	add	a, -11
	ld	iyl, a
	ld	(ix - 20), e
	ld	a, e
	cp	a, 8
	jr	nc, BB4_4
	ld	a, d
	add	a, l
	add	a, 50
	jr	BB4_8
BB4_4:
	push	bc
	pop	hl
	ld	de, (ix - 16)
	add	hl, de
	ld	de, 17
	add	hl, de
	ld	de, 3
	or	a, a
	sbc	hl, de
	jr	nc, BB4_6
	ld	hl, 5327444
	ld	c, (ix - 24)
	call	__ishru
	ld	a, l
	jr	BB4_8
BB4_6:
	ld	a, iyl
	or	a, a
	ld	a, 75
	jr	z, BB4_8
	ld	a, 65
BB4_8:
	ld	iy, (ix - 9)
	ld	(iy - 5), a
	ld	hl, (ix - 23)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 83
	jr	c, BB4_12
	ld	hl, (ix - 3)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 72
	jr	c, BB4_12
	ld	hl, (ix - 3)
	ld	de, -13
	add	hl, de
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 67
	jr	c, BB4_12
	ld	a, 68
BB4_12:
	ld	iy, (ix - 9)
	ld	(iy - 4), a
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	push	hl
	pop	iy
	ld	de, 27
	add	iy, de
	ld	de, -13
	or	a, a
	sbc	hl, de
	ld	hl, 11
	jr	z, BB4_14
	ld	hl, 10
BB4_14:
	ld	a, (ix - 20)
	cp	a, 8
	lea	bc, iy
	jr	c, BB4_16
	push	hl
	pop	bc
BB4_16:
	ld	iy, (ix - 9)
	ld	(iy - 3), bc
	ld	(iy), 0
	ld	(iy + 1), 0
	lea	de, iy
	ld	hl, (ix - 19)
	inc	hl
	ld	bc, (ix - 3)
	inc	bc
	ld	(ix - 3), bc
	ld	a, (ix - 13)
	inc	a
	ld	bc, 8
	ld	iy, (ix - 6)
	add	iy, bc
	ld	(ix - 6), iy
	push	de
	pop	iy
	lea	iy, iy + 7
	ld	(ix - 9), iy
	ld	de, (ix - 12)
	ld	c, 13
	ld	iy, 13
	jp	BB4_1
BB4_17:
	ld	de, 364
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	add	iy, de
	ld	de, 52
	ld	(iy), de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_main_menu
_draw_main_menu:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 40
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 100
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.1
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 132
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 164
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.3
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_rules_menu
_draw_rules_menu:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 132
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.4
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_card
_print_card:
	ld	hl, -7
	call	__frameset
	ld	iyl, 62
	ld	e, 60
	ld	a, (ix + 11)
	ld	iyh, a
	xor	a, 1
	ld	l, a
	bit	0, l
	ld	c, iyl
	jr	nz, BB7_2
	ld	c, e
BB7_2:
	ld	a, (ix + 12)
	or	a, a
	ld	(ix - 7), bc
	ld	(ix - 4), de
	jr	z, BB7_4
	ld	h, 0
	jr	BB7_5
BB7_4:
	ld	h, -1
BB7_5:
	ld	bc, (ix + 15)
	ld	de, (ix + 18)
	ld	a, l
	and	a, h
	ld	(ix - 1), a
	bit	0, a
	jr	nz, BB7_9
	ld	a, iyh
	bit	0, a
	jr	z, BB7_8
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	ld	(ix - 4), hl
BB7_8:
	push	bc
	pop	hl
	ld	bc, -8
	add	hl, bc
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 4)
	push	hl
	call	_gfx_PrintChar
	ld	de, (ix + 18)
	ld	bc, (ix + 15)
	pop	hl
BB7_9:
	push	de
	push	bc
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix + 8)
	ld	de, -1
	or	a, a
	sbc	hl, de
	jr	nz, BB7_11
	ld	hl, 45
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, 45
	jr	BB7_12
BB7_11:
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
BB7_12:
	push	hl
	call	_gfx_PrintChar
	pop	hl
	bit	0, (ix - 1)
	jr	nz, BB7_14
	ld	de, 16
	ld	hl, (ix + 15)
	add	hl, de
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
BB7_14:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_playing_card
_print_playing_card:
	call	__frameset0
	ld	hl, (ix + 15)
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_playing_value
_print_playing_value:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	ld	bc, -8
	add	hl, bc
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 43
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (ix - 3)
	ld	(ix + 6), hl
	ld	(ix + 9), 1
	pop	hl
	pop	ix
	jp	_gfx_PrintInt
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_stats
_print_hand_stats:
	call	__frameset0
	ld	de, (ix + 15)
	ld	hl, (ix + 18)
	ld	bc, 16
	add	hl, bc
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix + 9)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.5
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (ix + 12)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_type
_print_hand_type:
	ld	hl, -3
	call	__frameset
	ld	bc, (ix + 15)
	ld	iy, (ix + 18)
	ld	hl, (ix + 9)
	ld	de, -1
	or	a, a
	sbc	hl, de
	jr	nz, BB11_2
	ld	de, 16
	add	iy, de
	push	iy
	push	bc
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 21)
	push	hl
	call	_gfx_PrintInt
	jr	BB11_5
BB11_2:
	lea	hl, ix + 6
	ld	(ix - 3), hl
	push	iy
	push	bc
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	de, (ix + 6)
	ld	bc, 10
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	c, BB11_6
	ld	hl, _.str.16
BB11_4:
	push	hl
	call	_gfx_PrintString
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, (ix + 15)
	ld	(iy + 9), hl
	ld	hl, (ix + 18)
	ld	(iy + 12), hl
	call	_print_hand_stats
	pop	hl
	pop	hl
	pop	hl
BB11_5:
	pop	hl
	pop	hl
	pop	hl
	pop	ix
	ret
BB11_6:
	ld	hl, JTI11_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB11_7:
	ld	hl, _.str.6
	jr	BB11_4
BB11_8:
	ld	hl, _.str.7
	jr	BB11_4
BB11_9:
	ld	hl, _.str.8
	jr	BB11_4
BB11_10:
	ld	hl, _.str.9
	jr	BB11_4
BB11_11:
	ld	hl, _.str.10
	jr	BB11_4
BB11_12:
	ld	hl, _.str.11
	jr	BB11_4
BB11_13:
	ld	hl, _.str.12
	jr	BB11_4
BB11_14:
	ld	hl, _.str.13
	jr	BB11_4
BB11_15:
	ld	hl, _.str.15
	jr	BB11_4
BB11_16:
	ld	hl, _.str.14
	jr	BB11_4
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI11_0
JTI11_0:
	dl	BB11_7
	dl	BB11_8
	dl	BB11_9
	dl	BB11_10
	dl	BB11_11
	dl	BB11_12
	dl	BB11_13
	dl	BB11_14
	dl	BB11_16
	dl	BB11_15

	section	.text,"ax",@progbits
	public	_display_game_stats
_display_game_stats:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 24
	ld	(ix - 3), hl
	ld	de, 10
	ld	hl, 2
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, _.str.17
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 10
	push	hl
	push	hl
	ld	hl, _.str.18
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 20
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, _.str.19
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 44
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 150
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.20
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.21
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 18)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 166
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	call	_gfx_PrintChar
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + 21)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, 10
	ld	(iy + 9), hl
	ld	hl, 78
	ld	(iy + 12), hl
	ld	hl, (ix + 12)
	ld	(iy + 15), hl
	call	_print_hand_type
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_blind_menu
_draw_blind_menu:
	ld	hl, -9
	call	__frameset
	lea	hl, ix + 18
	ld	(ix - 3), hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, 9
	ld	hl, (ix - 3)
	ldir
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	(ix - 3), hl
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_display_game_stats
	ld	iy, 104
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
BB13_1:
	ld	de, 338
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB13_9
	lea	bc, iy
	ld	de, -4
	add	iy, de
	ld	hl, 120
	push	hl
	ld	(ix - 9), iy
	push	iy
	ld	hl, _.str.22
	push	hl
	ld	(ix - 6), bc
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	ld	bc, (ix - 6)
	pop	hl
	pop	hl
	push	bc
	pop	hl
	ld	de, 182
	or	a, a
	sbc	hl, de
	ld	de, _.str.24
	jr	z, BB13_4
	ld	de, _.str.25
BB13_4:
	push	bc
	pop	hl
	ld	bc, 104
	or	a, a
	sbc	hl, bc
	ld	hl, _.str.23
	jr	z, BB13_6
	ex	de, hl
BB13_6:
	ld	de, 144
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 152
	push	hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, _.str.26
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 168
	push	hl
	ld	hl, (ix - 9)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (_current_ante)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _base_ante_values
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(ix - 9), bc
	ld	d, a
	ld	hl, (ix - 3)
	push	hl
	pop	iy
	push	hl
	pop	bc
	ld	(ix - 3), bc
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	iy, 0
	lea	hl, iy
	ld	e, 63
	call	__fmul
	ld	hl, -8388608
	call	__fadd
	ld	hl, (ix - 9)
	ld	e, d
	call	__fmul
	call	__ftol
	push	iy
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	de, (_current_blind)
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	nz, BB13_8
	ld	hl, 94
	push	hl
	ld	hl, (ix - 6)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.27
	push	hl
	call	_gfx_PrintString
	pop	hl
BB13_8:
	ld	hl, (ix - 6)
	ld	de, -14
	add	hl, de
	ld	de, 125
	push	de
	ld	de, 68
	push	de
	ld	de, 115
	push	de
	push	hl
	call	_gfx_Rectangle
	ld	iy, (ix - 6)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	ld	de, 78
	add	iy, de
	jp	BB13_1
BB13_9:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_hand
_display_hand:
	ld	hl, -12
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, 74
	ld	(ix - 6), hl
	ld	bc, 0
	lea	hl, iy + 9
	ld	(ix - 3), hl
BB14_1:
	ld	de, (iy)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB14_6
	ld	(ix - 9), bc
	ld	iy, (ix - 3)
	bit	0, (iy + 5)
	jr	nz, BB14_4
	bit	0, (iy + 6)
	ld	hl, 200
	jr	z, BB14_5
BB14_4:
	ld	hl, 184
BB14_5:
	ld	(ix - 12), hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	lea	hl, iy
	ld	(ix - 3), hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	bc, 7
	ldir
	ld	hl, (ix - 6)
	ld	(iy + 9), hl
	ld	hl, (ix - 12)
	ld	(iy + 12), hl
	call	_print_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 32
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
	lea	iy, iy + 7
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	jr	BB14_1
BB14_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_cards_to_hand
_draw_cards_to_hand:
	ld	hl, -9
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB15_2
	ld	de, 0
BB15_2:
	ld	iy, (ix + 6)
	lea	hl, iy + 11
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	push	de
	pop	iy
	push	hl
	pop	bc
BB15_3:
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	z, BB15_14
	ld	(ix - 9), bc
	lea	bc, iy
	ld	(ix - 3), bc
BB15_5:
	ld	hl, (ix + 15)
	ld	hl, (hl)
	ld	de, 52
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB15_7
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 15)
	ld	(iy), hl
	ld	hl, (ix + 12)
	push	hl
	call	_shuffle_deck
	pop	hl
BB15_7:
	ld	hl, (ix + 6)
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB15_9
	ld	de, 0
BB15_9:
	ld	iy, (ix - 6)
BB15_10:
	ld	bc, (ix - 3)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB15_5
	ld	hl, (iy)
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jr	z, BB15_13
	lea	iy, iy + 7
	dec	de
	jr	BB15_10
BB15_13:
	lea	de, iy - 2
	ld	hl, (ix + 15)
	push	hl
	pop	iy
	ld	hl, (iy)
	push	hl
	pop	bc
	inc	bc
	ld	(iy), bc
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	add	hl, bc
	ld	bc, 7
	ldir
	ld	iy, (ix - 3)
	ld	bc, (ix - 9)
	inc	bc
	jp	BB15_3
BB15_14:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	de, (ix + 9)
	add	hl, de
	ld	(iy + 3), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_get_hand_type
_get_hand_type:
	ld	hl, -463
	call	__frameset
	ld	de, (ix + 9)
	ld	hl, (ix + 12)
	ld	bc, 7
	xor	a, a
	ld	(ix - 3), de
	ld	de, -414
	lea	iy, ix
	add	iy, de
	ld	(iy), a
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	ld	sp, hl
	push	ix
	ld	de, -410
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	bc
	ld	de, (ix - 3)
	push	ix
	ld	bc, -413
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	de
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	call	_memcpy
	ld	de, 0
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 44), de
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_2
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	(iy + 3), de
	ld	(iy + 6), de
	jr	BB16_4
BB16_2:
	ld	de, -6
	ld	bc, 9
	ld	iy, _hand_table
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, -4
	or	a, a
	sbc	hl, de
	jr	nc, BB16_5
	lea	hl, iy
	ld	iy, (ix + 6)
	lea	de, iy
	ldir
	ld	hl, (ix + 12)
	ld	(iy + 44), hl
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	pea	iy + 9
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB16_4:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
BB16_5:
	ld	de, -195
	lea	hl, ix
	add	hl, de
	ld	de, -438
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -404
	lea	iy, ix
	add	iy, de
	lea	hl, iy + 14
	push	ix
	ld	de, -410
	add	ix, de
	ld	(ix), hl
	pop	ix
	lea	hl, iy + 2
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	lea	hl, iy
	ld	de, -457
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	bc, (ix + 12)
	dec	bc
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 7
	ld	de, 0
	ld	(ix - 3), de
	push	ix
	ld	de, -435
	add	ix, de
	ld	(ix), bc
BB16_6:
	pop	ix
	ld	de, (ix - 3)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB16_13
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	push	de
	pop	iy
	inc	iy
	ex	de, hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	de, -423
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -429
	add	ix, de
	ld	(ix), iy
	pop	ix
	lea	hl, iy
	ld	de, (ix + 12)
BB16_8:
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB16_12
	ld	(ix - 3), de
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, (hl)
	ld	de, -432
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	push	bc
	pop	hl
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (hl)
	ld	bc, -432
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB16_11
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -410
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	de, (ix + 12)
BB16_11:
	lea	hl, iy
	inc	hl
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 7
	lea	bc, iy
	jp	BB16_8
BB16_12:
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	ld	bc, -429
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	(ix - 3), de
	push	ix
	ld	de, -435
	add	ix, de
	ld	bc, (ix)
	jp	BB16_6
BB16_13:
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(iy + 14), 0
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	hl
	pop	iy
	inc	iy
	ld	bc, 383
	lea	de, iy
	ldir
	ld	de, 1
	ld	iy, (ix + 12)
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	dec	de
	jp	p, BB16_15
	push	de
	pop	iy
BB16_15:
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, 3
	ld	(ix - 3), bc
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy
	ld	bc, -432
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	bc, -429
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	(ix), de
	pop	ix
BB16_16:
	ld	bc, (ix - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_27
	ld	de, -444
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	a, (iy - 1)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -410
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ld	de, (hl)
	inc	de
	ld	(hl), de
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	lea	hl, iy
	ld	de, 67
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jr	nz, BB16_19
	ld	de, -420
	jr	BB16_25
BB16_19:
	lea	hl, iy
	ld	de, 68
	or	a, a
	sbc	hl, de
	jr	nz, BB16_21
	ld	de, -423
	jr	BB16_25
BB16_21:
	lea	hl, iy
	ld	de, 72
	or	a, a
	sbc	hl, de
	jr	nz, BB16_23
	ld	de, -429
	jr	BB16_25
BB16_23:
	lea	hl, iy
	ld	de, 83
	or	a, a
	sbc	hl, de
	jr	nz, BB16_26
	ld	de, -432
BB16_25:
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
BB16_26:
	ld	de, 0
	ld	(ix - 3), bc
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -444
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB16_16
BB16_27:
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(iy + 11), hl
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 8), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 5), hl
	ld	bc, -432
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 2), hl
	ld	bc, 4
	push	de
	pop	hl
	ld	(ix - 3), bc
	ld	bc, -441
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (ix - 3)
BB16_28:
	ld	(ix - 3), de
	push	ix
	ld	de, -420
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB16_31
	ld	hl, (iy)
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB16_32
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, iy + 3
	ld	bc, 4
	jr	BB16_28
BB16_31:
	ld	bc, -463
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB16_33
BB16_32:
	ld	(ix - 3), de
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	hl, _.str.28
	add	hl, bc
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -463
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, (ix - 3)
BB16_33:
	ld	bc, 9
	ld	iy, ___const.get_hand_type.straight_ranks
	push	de
	pop	hl
BB16_34:
	ld	(ix - 3), de
	push	ix
	ld	de, -407
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB16_38
BB16_35:
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB16_39
	lea	hl, iy
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -410
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	bc, 9
	ld	hl, (hl)
	ld	de, (ix - 3)
	inc	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_35
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	inc	iy
	ld	de, 0
	jr	BB16_34
BB16_38:
	ld	bc, -460
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB16_40
BB16_39:
	ld	hl, ___const.get_hand_type.straight_ranks
	push	hl
	pop	iy
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	a, (iy + 4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -460
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 0
BB16_40:
	ld	hl, _.str.29
	ld	bc, -438
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (iy)
	ld	(ix - 3), de
	push	ix
	ld	de, -450
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 45)
	push	ix
	ld	de, -447
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 42)
	push	ix
	ld	de, -444
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 39)
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 36)
	ld	de, -432
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -417
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld.sis	bc, 0
	ld	(iy), c
	ld	(iy + 1), b
	xor	a, a
	ld	bc, -454
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	ld	de, (ix - 3)
	push	de
	pop	bc
	ld	(ix - 3), bc
	push	ix
	ld	bc, -438
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -453
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	bc, (ix - 3)
BB16_41:
	ld	de, -423
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB16_53
	ld	bc, -429
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -410
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	nz, BB16_46
	ld	(ix - 3), de
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	lea	bc, iy
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB16_45
	ld	(ix - 3), de
	ld	de, -457
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	de, (ix - 3)
	ld	(hl), e
BB16_45:
	inc	bc
	ld	de, -429
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	jr	BB16_52
BB16_46:
	lea	hl, iy
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	inc	bc
	jr	nz, BB16_48
	ld	bc, -438
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -414
	jr	BB16_50
BB16_48:
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_51
	ld	bc, -453
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	dec	bc
BB16_50:
	lea	hl, ix
	add	hl, bc
	ld	(hl), e
	push	ix
	ld	de, -429
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -423
	add	ix, de
	ld	bc, (ix)
	pop	ix
	jr	BB16_52
BB16_51:
	ld	de, -429
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, -423
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
BB16_52:
	inc	hl
	jp	BB16_41
BB16_53:
	ld	hl, (ix + 12)
	ld	de, 5
	or	a, a
	sbc	hl, de
	ld	e, -1
	ld	iyl, d
	ld	iyh, e
	jr	z, BB16_55
	ld	iyh, iyl
BB16_55:
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	l, a
	ld	a, iyh
	and	a, l
	ld	bc, -450
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB16_57
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB16_57:
	and	a, l
	ld	bc, -447
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB16_59
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB16_59:
	and	a, l
	ld	bc, -444
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB16_61
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB16_61:
	and	a, l
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB16_63
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB16_63:
	and	a, l
	ld	bc, -432
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_65
	ld	e, iyl
BB16_65:
	and	a, e
	ld	b, a
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 9
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, b
	or	a, l
	ld	l, a
	ld	a, iyh
	ex	de, hl
	ld	iyl, e
	ex	de, hl
	and	a, l
	ld	c, a
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, c
	and	a, l
	bit	0, a
	jp	z, BB16_71
	bit	0, b
	jp	nz, BB16_71
	ld	bc, 65
	ld	de, -460
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	jr	nz, BB16_71
	ld	de, (ix + 6)
	ld	hl, _hand_table+81
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB16_69:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB16_4
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	bc, iy
	ld	hl, (ix + 9)
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB16_69
BB16_71:
	bit	0, a
	jr	z, BB16_75
	ld	de, (ix + 6)
	ld	hl, _hand_table+72
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB16_73:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB16_4
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	bc, iy
	ld	hl, (ix + 9)
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB16_73
BB16_75:
	ld	de, -453
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 9
	jp	nz, BB16_84
	ld	de, -438
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_89
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_89
	ld	de, (ix + 6)
	ld	hl, _hand_table+54
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB16_79:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	dec	bc
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	z, BB16_82
	cp	a, e
	jr	nz, BB16_83
BB16_82:
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB16_83:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB16_79
BB16_84:
	ld	de, (ix + 6)
	ld	hl, _hand_table+63
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB16_85:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	ld	bc, -454
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB16_88
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB16_88:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB16_85
BB16_89:
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	jp	nc, BB16_95
	ld	de, (ix + 6)
	ld	hl, _hand_table+45
	ldir
	ld	hl, (ix + 9)
	ex	de, hl
	inc	de
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB16_91:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	de
	pop	iy
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	ix
	ld	bc, -463
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	jr	nz, BB16_94
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	push	ix
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	dec	hl
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	push	ix
	ld	de, -407
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	ldir
BB16_94:
	lea	iy, iy + 7
	lea	de, iy
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	jp	BB16_91
BB16_95:
	ld	a, iyl
	bit	0, a
	jr	z, BB16_99
	ld	de, (ix + 6)
	ld	hl, _hand_table+36
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
BB16_97:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_4
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	dec	de
	jr	BB16_97
BB16_99:
	ld	de, -438
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_105
	ld	de, (ix + 6)
	ld	hl, _hand_table+27
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB16_101:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	dec	bc
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB16_104
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB16_104:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB16_101
BB16_105:
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB16_112
	ld	de, (ix + 6)
	ld	hl, _hand_table+18
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	a, (iy + 1)
	ld	bc, -407
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB16_107:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	z, BB16_110
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	jr	nz, BB16_111
BB16_110:
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB16_111:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB16_107
BB16_112:
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	jp	nz, BB16_118
	ld	de, (ix + 6)
	ld	hl, _hand_table+9
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB16_114:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	nz, BB16_117
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB16_117:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB16_114
BB16_118:
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table
	ldir
	lea	de, iy + 9
	ld	bc, 7
	ld	(ix - 3), de
	ld	de, -435
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	hl, 1
	ld	(iy + 44), hl
	jp	BB16_4
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_playing_hand
_display_playing_hand:
	ld	hl, -12
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, (ix + 12)
	ld	hl, (ix + 15)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 12), iy
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB17_2
	ld	de, 0
BB17_2:
	ld	iy, (ix + 6)
	ld	bc, 120
BB17_3:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB17_8
	ld	(ix - 9), de
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	lea	hl, iy
	ld	(ix - 3), bc
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	(ix - 6), hl
	ld	bc, 7
	ldir
	ld	hl, (ix - 3)
	ld	(iy + 9), hl
	ld	hl, 100
	ld	(iy + 12), hl
	call	_print_playing_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 15)
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB17_7
	ld	hl, (ix - 12)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	call	_card_equal
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB17_7
	ld	iy, (ix - 12)
	ld	hl, (iy + 2)
	ld	de, 76
	push	de
	ld	de, (ix - 3)
	push	de
	push	hl
	call	_print_playing_value
	pop	hl
	pop	hl
	pop	hl
BB17_7:
	ld	iy, (ix - 6)
	lea	iy, iy + 7
	ld	de, 32
	ld	hl, (ix - 3)
	add	hl, de
	ld	de, (ix - 9)
	dec	de
	push	hl
	pop	bc
	jp	BB17_3
BB17_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handle_draw_scoring
_handle_draw_scoring:
	ld	hl, -24
	call	__frameset
	ld	de, (ix + 15)
	ld	iy, (ix + 18)
	ld	hl, (iy + 3)
	ld	(ix - 15), hl
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	dec	bc
	call	pe, __setflag
	jp	p, BB18_2
	push	bc
	pop	de
BB18_2:
	ld	iy, 2
	lea	hl, ix - 9
	ld	(ix - 18), hl
BB18_3:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB18_5
	ld	(ix - 12), bc
	lea	bc, iy
	ld	hl, (ix + 12)
	add	hl, bc
	ld	hl, (hl)
	ld	bc, (ix - 15)
	add	hl, bc
	ld	(ix - 15), hl
	scf
	sbc	hl, hl
	push	hl
	ld	(ix - 21), de
	ld	(ix - 24), iy
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (ix + 21)
	push	hl
	call	_display_hand
	pop	hl
	ld	de, (ix - 18)
	ld	hl, (ix + 18)
	ld	bc, 9
	ldir
	ld	hl, (ix - 15)
	ld	(ix - 6), hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_display_playing_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	hl, (ix - 18)
	ld	bc, 9
	ldir
	ld	hl, (ix + 36)
	push	hl
	ld	hl, (ix + 33)
	push	hl
	ld	hl, (ix + 30)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + 27)
	push	hl
	ld	hl, (ix + 24)
	push	hl
	call	_display_game_stats
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, 250
	push	hl
	call	_wait_frames
	ld	iy, (ix - 24)
	ld	de, (ix - 21)
	pop	hl
	ld	hl, (ix - 12)
	inc	hl
	ld	(ix - 12), hl
	ld	bc, 7
	add	iy, bc
	ld	bc, (ix - 12)
	jp	BB18_3
BB18_5:
	ld	iy, (ix + 18)
	ld	hl, (iy + 6)
	ld	bc, (ix - 15)
	call	__imulu
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -637
	call	__frameset
	ld	bc, -559
	lea	iy, ix
	add	iy, bc
	ld	hl, 0
	lea	de, ix - 15
	push	ix
	ld	bc, -587
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -382
	add	ix, bc
	lea	de, ix
	pop	ix
	push	ix
	ld	bc, -574
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 112
	push	ix
	ld	bc, -565
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 74
	push	ix
	ld	bc, -594
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 27
	push	ix
	ld	bc, -571
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 18
	push	ix
	ld	bc, -606
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 9
	push	ix
	ld	bc, -609
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -568
	add	ix, bc
	ld	(ix), iy
	pop	ix
	lea	de, iy
	ld	bc, -600
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	hl
	call	_time
	pop	de
	push	hl
	call	_srand
	pop	hl
	call	_gfx_Begin
	ld	e, 0
	or	a, a
	sbc	hl, hl
	ld	bc, -565
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	bc, iy + 3
	ld	(ix - 3), de
	ld	de, -590
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -571
	add	ix, de
	ld	iy, (ix)
	pop	ix
	lea	bc, iy + 9
	ld	de, -603
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -565
	add	ix, de
	ld	iy, (ix)
	pop	ix
	lea	bc, iy + 15
	ld	de, -597
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	hl
	pop	bc
BB19_1:
	ld	de, (ix - 3)
BB19_2:
	ld	(ix - 3), de
	ld	de, -562
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	ld	a, c
	or	a, a
	push	hl
	pop	bc
	ld	de, (ix - 3)
	ld	a, e
	ld	iyl, e
	ld	l, e
	jp	z, BB19_89
BB19_3:
	ld	(ix - 3), bc
	push	ix
	ld	bc, -577
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -591
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
BB19_4:
	ld	bc, (ix - 3)
	ld	(ix - 3), de
	ld	de, -580
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	de, (ix - 3)
BB19_5:
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	cp	a, 2
	jp	z, BB19_84
	ld	a, l
	cp	a, 3
	ld	bc, -584
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	(hl), e
	push	ix
	inc	bc
	push	af
	add	ix, bc
	pop	af
	ld	(ix), iy
	pop	ix
	jp	nz, BB19_12
	call	_kb_Scan
	scf
	sbc	hl, hl
	ld	(ix - 15), hl
	ld	iy, 0
	ld	(ix - 12), iy
	ld	(ix - 9), iy
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -587
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	hl, 4
	push	hl
	ld	de, 3
	push	de
	push	hl
	push	iy
	call	_draw_blind_menu
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jr	nz, BB19_10
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	ld	hl, 3
	ld	de, -562
	lea	iy, ix
	push	af
	add	iy, de
	pop	af
	ld	(iy), hl
	ld	de, -580
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	push	ix
	ld	bc, -584
	push	af
	add	ix, bc
	pop	af
	ld	e, (ix)
	pop	ix
	push	ix
	inc	bc
	push	af
	add	ix, bc
	pop	af
	ld	iy, (ix)
	pop	ix
	jp	z, BB19_5
	jp	BB19_100
BB19_9:
	call	_kb_Scan
BB19_10:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jr	nz, BB19_9
	ld	hl, (_current_ante)
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _base_ante_values
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	de, -562
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	d, a
	ld	bc, (_current_blind)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	or	a, a
	sbc	hl, hl
	ld	e, 63
	call	__fmul
	ld	hl, -8388608
	call	__fadd
	ld	(ix - 3), bc
	ld	bc, -562
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	e, d
	ld	bc, (ix - 3)
	call	__fmul
	call	__ftol
	ld	de, 1
	ld	(ix - 3), bc
	push	ix
	ld	bc, -562
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -584
	add	ix, bc
	ld	e, (ix)
	pop	ix
	push	ix
	inc	bc
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	jp	BB19_4
BB19_12:
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -574
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_create_deck
	pop	hl
	ld	bc, -574
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_shuffle_deck
	pop	hl
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 115), 0
	push	ix
	ld	bc, -590
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	hl
	pop	de
	inc	de
	ld	bc, 61
	ldir
	ld	hl, 8
	ld	(iy + 112), hl
	ld	iy, 11
BB19_13:
	lea	hl, iy
	ld	de, 67
	or	a, a
	sbc	hl, de
	jr	z, BB19_15
	lea	de, iy
	lea	bc, iy
	ld	(ix - 3), bc
	ld	bc, -565
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	add	iy, de
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	ld	de, 7
	add	iy, de
	jr	BB19_13
BB19_15:
	or	a, a
	sbc	hl, hl
	ld	bc, -568
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 109), hl
	ld	de, 8
	ld	bc, -618
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	de, 4
	push	de
	pop	iy
	dec	de
	push	de
	pop	bc
	push	ix
	ld	de, -625
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	(ix - 3), bc
	push	ix
	ld	bc, -583
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -619
	add	ix, bc
	ld	(ix), e
	pop	ix
	ld	de, 1
	push	ix
	ld	bc, -583
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	dec	bc
	add	ix, bc
	ld	e, (ix)
	pop	ix
	push	ix
	ld	bc, -612
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -577
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB19_16:
	ld	bc, (ix - 3)
	ld	a, e
	push	ix
	ld	de, -622
	add	ix, de
	ld	(ix), l
	pop	ix
	ld	de, -583
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	bit	0, l
	jp	z, BB19_100
	ld	de, -562
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 1
	or	a, a
	sbc	hl, de
	jp	nz, BB19_100
	ld	de, -615
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -628
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -584
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (_frame_timer)
	inc	hl
	ld	(_frame_timer), hl
	call	_kb_Scan
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 115)
	push	de
	pop	hl
	ld	(ix - 3), de
	ld	de, -618
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB19_20
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	bc, -568
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pea	iy + 109
	ld	bc, -574
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	push	hl
	ld	bc, -565
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_draw_cards_to_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB19_20:
	ld	hl, -720878
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	bc, -612
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -565
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -631
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	(iy + 14), 1
	ld	de, (ix - 3)
	ld	bc, -583
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	a, e
	bit	5, a
	jp	z, BB19_28
	ld	bc, -619
	lea	hl, ix
	add	hl, bc
	bit	5, (hl)
	jp	nz, BB19_28
	ld	de, -612
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	ld	bc, -565
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	add	iy, de
	push	ix
	ld	bc, -562
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	a, (iy + 15)
	ld	bc, -568
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, (iy + 118)
	bit	0, a
	ld	bc, (ix - 3)
	jr	nz, BB19_25
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB19_25
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 1
	ld	hl, 1
	jr	BB19_27
BB19_25:
	bit	0, a
	jr	z, BB19_28
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 0
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	hl, -1
	jp	m, BB19_28
BB19_27:
	add	hl, de
	ld	bc, -568
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 118), hl
BB19_28:
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	iy, (iy + 112)
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	lea	bc, iy
	ld	hl, 0
	jp	p, BB19_30
	push	hl
	pop	bc
BB19_30:
	ld	(ix - 3), bc
	push	ix
	ld	bc, -583
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -619
	add	ix, bc
	ld	(ix), e
	pop	ix
	ld	bc, (ix - 3)
	push	ix
	ld	de, -634
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -562
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -597
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ex	de, hl
	ld	(ix - 3), de
	ld	de, -618
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	push	bc
	pop	iy
	push	ix
	ld	de, -562
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ld	de, (ix - 3)
BB19_31:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB19_35
	bit	0, (iy)
	jr	z, BB19_34
	lea	hl, iy - 6
	ld	(ix - 3), bc
	push	ix
	ld	bc, -637
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	de
	pop	hl
	inc	hl
	push	ix
	ld	bc, -577
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ex	de, hl
	ld	bc, (ix - 3)
	push	ix
	ld	de, -562
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -594
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ex	de, hl
	ld	bc, -637
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, (ix - 3)
	ldir
	ld	de, -562
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -577
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB19_34:
	lea	iy, iy + 7
	dec	bc
	jp	BB19_31
BB19_35:
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	ld	bc, -594
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	hl
	ld	bc, -571
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_get_hand_type
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -720874
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	bc, -577
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	jp	z, BB19_44
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 118)
	ld	bc, -622
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	cp	a, 0
	call	pe, __setflag
	jp	m, BB19_44
	ld	bc, -615
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB19_55
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB19_55
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 115)
	ld	bc, -634
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -597
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	(ix - 3), de
	push	ix
	ld	de, -612
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ld	de, (ix - 3)
BB19_40:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB19_66
	bit	0, (iy)
	jr	z, BB19_43
	ld	bc, -1
	ld	(iy - 4), bc
	ld	(ix - 3), de
	push	ix
	ld	de, -612
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ld	(iy), 0
	ld	(iy - 1), 0
	ld	de, (ix - 3)
	dec	de
BB19_43:
	lea	iy, iy + 7
	dec	hl
	jr	BB19_40
BB19_44:
	ld	de, -615
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -612
	add	ix, de
	ld	bc, (ix)
	pop	ix
BB19_45:
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	push	ix
	ld	de, -622
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	a, l
	bit	7, a
	ld	de, -615
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	(hl), iy
	jp	z, BB19_58
	ld	de, -568
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	de, (iy + 118)
	ld	(ix - 3), bc
	ld	bc, -584
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	cp	a, 0
	call	pe, __setflag
	ld	bc, (ix - 3)
	jp	m, BB19_54
	ld	bc, -628
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB19_56
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB19_56
	ld	bc, -597
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	bc, -634
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB19_50:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB19_67
	push	hl
	pop	bc
	bit	0, (iy)
	jr	z, BB19_53
	scf
	sbc	hl, hl
	ld	(iy - 4), hl
	ld	(iy), 0
	ld	(iy - 1), 0
	inc	de
BB19_53:
	lea	iy, iy + 7
	push	bc
	pop	hl
	dec	hl
	jr	BB19_50
BB19_54:
	ld	de, -615
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	jr	BB19_58
BB19_55:
	ld	de, -612
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	jp	BB19_45
BB19_56:
	ld	de, -615
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
BB19_57:
	ld	de, -612
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
BB19_58:
	ld	hl, -720866
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	a, e
	bit	1, a
	ld	(ix - 3), bc
	ld	bc, -562
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	(hl), de
	ld	bc, (ix - 3)
	jr	z, BB19_62
	ld	(ix - 3), bc
	ld	bc, -591
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	bit	1, l
	ld	bc, (ix - 3)
	jp	nz, BB19_71
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB19_64
	ld	bc, -631
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 14), 0
	ld	bc, -562
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	(ix - 3), de
	push	ix
	ld	de, -618
	add	ix, de
	ld	bc, (ix)
	pop	ix
	dec	bc
	push	ix
	ld	de, -591
	add	ix, de
	ld	l, (ix)
	pop	ix
	jp	BB19_70
BB19_62:
	ld	(ix - 3), bc
	ld	bc, -591
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
BB19_63:
	ld	bc, (ix - 3)
	jp	BB19_71
BB19_64:
	push	bc
	pop	hl
	ld	(ix - 3), de
	ld	de, -612
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	m, BB19_69
	ld	de, -612
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	dec	bc
	ld	de, -631
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy + 14), 0
	ld	(ix - 3), bc
	ld	bc, -562
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	ix
	ld	bc, -591
	add	ix, bc
	ld	l, (ix)
	pop	ix
	jr	BB19_63
BB19_66:
	ld	(ix - 3), bc
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 115), de
	or	a, a
	sbc	hl, hl
	ld	(iy + 118), hl
	ld	de, -615
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	dec	iy
	ld	bc, (ix - 3)
	jp	BB19_45
BB19_67:
	or	a, a
	sbc	hl, hl
	ld	bc, -568
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 118), hl
	ld	bc, -628
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	scf
	sbc	hl, hl
	push	hl
	ld	bc, -637
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	call	_gfx_FillScreen
	pop	hl
	ld	bc, -565
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	ld	bc, -603
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -594
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_playing_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -571
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	hl, 4
	push	hl
	ld	bc, -615
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -628
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -580
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -625
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, 500
	push	hl
	call	_wait_frames
	pop	hl
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 71)
	ld	de, 4
	push	de
	ld	bc, -615
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	push	ix
	ld	bc, -628
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -580
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -625
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -565
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -571
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	hl
	ld	bc, -603
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -594
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_handle_draw_scoring
	ld	de, -634
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	iy, 33
	add	iy, sp
	ld	sp, iy
	ld	de, -571
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	a, (iy)
	ld	de, -606
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy), a
	ld	de, -568
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	a, (iy + 28)
	ld	(iy + 19), a
	ld	a, (iy + 29)
	ld	(iy + 20), a
	ld	bc, (iy + 33)
	call	__idivs
	ld	(iy + 21), hl
	ld	(iy + 24), bc
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	bc, -565
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	ld	bc, -603
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -594
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_playing_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -606
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	hl, 4
	push	hl
	ld	bc, -615
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -628
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -634
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -580
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -625
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, 500
	push	hl
	call	_wait_frames
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	bc, -565
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	ld	bc, -603
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -594
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_playing_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	scf
	sbc	hl, hl
	ld	bc, -568
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 9), hl
	ld	(iy + 12), hl
	inc	hl
	ld	(iy + 15), hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -609
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	hl, 4
	push	hl
	ld	bc, -615
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -628
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -634
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -580
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -625
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, 750
	push	hl
	call	_wait_frames
	ld	de, -634
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	pop	hl
	ld	de, -625
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	add	iy, bc
	lea	de, iy
	ld	bc, -568
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	hl, (iy + 115)
	ld	(ix - 3), de
	ld	de, -637
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	or	a, a
	sbc	hl, bc
	push	ix
	ld	bc, -568
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	(iy + 115), hl
	ld	de, (ix - 3)
	ex	de, hl
	push	hl
	pop	bc
	ld	(ix - 3), bc
	ld	bc, -580
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	bc, (ix - 3)
	jp	p, BB19_80
	ld	de, -625
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	de, -615
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	jp	BB19_57
BB19_69:
	ld	bc, -591
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	ld	(ix - 3), de
	ld	de, -612
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
BB19_70:
	ld	de, (ix - 3)
BB19_71:
	ld	a, e
	bit	2, a
	jr	z, BB19_78
	bit	2, l
	jr	nz, BB19_78
	ld	(ix - 3), bc
	ld	bc, -618
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	dec	de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	nz, BB19_75
	or	a, a
	sbc	hl, hl
	jr	BB19_77
BB19_75:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB19_78
	push	bc
	pop	hl
	inc	hl
	push	bc
	pop	de
BB19_77:
	ld	bc, -612
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ex	de, hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	ld	bc, -565
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	add	iy, de
	ld	(iy + 14), 0
	ld	bc, (ix - 3)
	jr	BB19_79
BB19_78:
	ld	de, -612
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
BB19_79:
	ld	bc, -565
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	scf
	sbc	hl, hl
	ld	(iy), hl
	lea	hl, iy
	ld	iy, 0
	lea	de, iy
	push	hl
	pop	iy
	ld	(iy + 3), de
	ld	(iy + 6), de
	push	de
	pop	iy
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	push	ix
	ld	bc, -600
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 9
	ldir
	ld	hl, 4
	push	hl
	ld	bc, -615
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -628
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	push	iy
	ld	bc, -580
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -625
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 6
	call	__sshru
	call	__snot
	ld.sis	bc, 1
	call	__sand
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	(ix - 3), bc
	ld	bc, -583
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	bc, (ix - 3)
	call	_gfx_SwapDraw
	ld	de, -615
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	de, -628
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	push	ix
	ld	de, -562
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -591
	add	ix, de
	ld	(ix), l
	pop	ix
	ld	hl, 1
	push	ix
	ld	de, -562
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -577
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -622
	add	ix, bc
	ld	de, (ix)
	pop	ix
	jp	BB19_16
BB19_80:
	ld	de, (_current_blind)
	push	de
	pop	hl
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	ld	hl, _current_blind
	jr	nz, BB19_82
	or	a, a
	sbc	hl, hl
	ld	(_current_blind), hl
	ld	de, (_current_ante)
	ld	hl, _current_ante
BB19_82:
	inc	de
	ld	(hl), de
	ld	hl, 3
	ld	de, -562
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -580
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -591
	add	ix, de
	ld	a, (ix)
	pop	ix
	ld	(ix - 3), bc
	push	ix
	ld	bc, -584
	add	ix, bc
	ld	e, (ix)
	pop	ix
	push	ix
	ld	bc, -577
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	bc, -583
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	bc, (ix - 3)
	jp	BB19_3
BB19_83:
	call	_gfx_Wait
BB19_84:
	call	_kb_Scan
	call	_draw_rules_menu
	call	_gfx_SwapDraw
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	ld	e, 0
	jp	nz, BB19_100
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	z, BB19_83
BB19_86:
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	z, BB19_88
	call	_kb_Scan
	ld	e, 0
	jr	BB19_86
BB19_88:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	jp	BB19_2
BB19_89:
	call	_kb_Scan
	call	_draw_main_menu
	call	_gfx_SwapDraw
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jr	nz, BB19_92
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	nz, BB19_94
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	ld	hl, 0
	ld	bc, -562
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	jr	nz, BB19_100
	jr	BB19_99
BB19_92:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jr	z, BB19_96
	call	_kb_Scan
	jr	BB19_92
BB19_94:
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	z, BB19_97
	call	_kb_Scan
	jr	BB19_94
BB19_96:
	ld	hl, 3
	jr	BB19_98
BB19_97:
	ld	hl, 2
BB19_98:
	ld	bc, -562
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
BB19_99:
	call	_gfx_Wait
	ld	e, 0
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), de
	ld	de, -562
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	jp	BB19_1
BB19_100:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_frame_timer
_frame_timer:
	rb	3

	section	.rodata,"a",@progbits
	public	_base_ante_values
_base_ante_values:
	dl	300
	dl	800
	dl	2000
	dl	5000
	dl	11000
	dl	20000
	dl	35000
	dl	50000

	section	.bss,"aw",@nobits
	public	_current_ante
_current_ante:
	rb	3

	section	.bss,"aw",@nobits
	public	_current_blind
_current_blind:
	rb	3

	section	.data,"aw",@progbits
	public	_hand_table
_hand_table:
	dl	0
	dl	5
	dl	1
	dl	1
	dl	10
	dl	2
	dl	2
	dl	20
	dl	2
	dl	3
	dl	30
	dl	3
	dl	4
	dl	30
	dl	4
	dl	5
	dl	35
	dl	4
	dl	6
	dl	40
	dl	4
	dl	7
	dl	60
	dl	7
	dl	8
	dl	100
	dl	8
	dl	9
	dl	100
	dl	8

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"CALCATRO", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"Press [2nd] to Start", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"Press [Alpha] for Rules", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"Press [Clear] to Quit", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"Press [Alpha] for Menu", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	" x ", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"High Card", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"Two Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"Three of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"Straight", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	"Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"Full House", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	"Four of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"Straight Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"Royal Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.16
_.str.16:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	_.str.17
_.str.17:
	db	"Score at", 0

	section	.rodata,"a",@progbits
	private	_.str.18
_.str.18:
	db	"least:", 0

	section	.rodata,"a",@progbits
	private	_.str.19
_.str.19:
	db	"Round Score:", 0

	section	.rodata,"a",@progbits
	private	_.str.20
_.str.20:
	db	"H: ", 0

	section	.rodata,"a",@progbits
	private	_.str.21
_.str.21:
	db	" D: ", 0

	section	.rodata,"a",@progbits
	private	_.str.22
_.str.22:
	db	"Select", 0

	section	.rodata,"a",@progbits
	private	_.str.23
_.str.23:
	db	"Small", 0

	section	.rodata,"a",@progbits
	private	_.str.24
_.str.24:
	db	"Big", 0

	section	.rodata,"a",@progbits
	private	_.str.25
_.str.25:
	db	"Boss", 0

	section	.rodata,"a",@progbits
	private	_.str.26
_.str.26:
	db	"Blind", 0

	section	.rodata,"a",@progbits
	private	_.str.27
_.str.27:
	db	"[2nd]", 0

	section	.rodata,"a",@progbits
	private	_.str.28
_.str.28:
	db	"SHCD", 0

	section	.rodata,"a",@progbits
	private	___const.get_hand_type.straight_ranks
___const.get_hand_type.straight_ranks:
	db	"23456789TJQKA"

	section	.rodata,"a",@progbits
	private	_.str.29
_.str.29:
	db	"23456789TJQKA", 0

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	__Unwind_SjLj_Register
	extern	_gfx_PrintChar
	extern	_srand
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	__fadd
	extern	_rand
	extern	__sand
	extern	_gfx_PrintString
	extern	_memcpy
	extern	__ftol
	extern	_gfx_PrintInt
	extern	__idivu
	extern	__idivs
	extern	__setflag
	extern	__sshru
	extern	__ltof
	extern	_time
	extern	__bdivu
	extern	__frameset
	extern	_kb_Scan
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	__fmul
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	__irems
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Wait
	extern	_gfx_Rectangle
	extern	_gfx_PrintStringXY
	extern	_gfx_End
	extern	__snot
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
