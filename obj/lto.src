	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_card_equal
_card_equal:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, 0
	push	hl
	pop	bc
	ld	l, (hl)
	ld	a, (iy)
	cp	a, l
	jr	nz, BB0_5
	ld	iy, (ix + 6)
	ld	hl, (iy + 2)
	push	bc
	pop	iy
	ld	bc, (iy + 2)
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_5
	ld	l, (iy + 1)
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	cp	a, l
	jr	z, BB0_4
	ld	de, 0
	jr	BB0_5
BB0_4:
	ld	de, 1
BB0_5:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_wait_frames
_wait_frames:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
BB1_1:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB1_3
	ld	(ix - 3), hl
	call	_kb_Scan
	call	_gfx_Wait
	ld	hl, (ix - 3)
	dec	hl
	jr	BB1_1
BB1_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_randomIntRange
_randomIntRange:
	call	__frameset0
	call	_rand
	push	hl
	pop	de
	ld	hl, 1
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, (ix + 9)
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__irems
	ld	de, (ix + 6)
	add	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_shuffle_deck
_shuffle_deck:
	ld	hl, -19
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 7
	lea	hl, ix - 7
	ld	(ix - 13), hl
	ld	de, 364
	lea	hl, iy
	add	hl, de
	ld	de, (hl)
	push	de
	pop	hl
	call	__imulu
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy - 7
	ld	(ix - 10), hl
	ld	de, 2
BB3_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_3
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 16), hl
	ld	(ix - 19), bc
	call	_rand
	ld	bc, (ix - 19)
	call	__irems
	ld	(ix - 19), hl
	ld	de, (ix - 13)
	ld	hl, (ix - 10)
	ld	iy, 7
	lea	bc, iy
	ldir
	ld	hl, (ix - 19)
	lea	bc, iy
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (ix - 10)
	lea	hl, iy
	ld	bc, 7
	ldir
	lea	de, iy
	ld	hl, (ix - 13)
	ld	bc, 7
	ldir
	ld	de, 2
	ld	iy, (ix - 10)
	lea	iy, iy - 7
	ld	(ix - 10), iy
	ld	bc, (ix - 16)
	jr	BB3_1
BB3_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_create_deck
_create_deck:
	ld	hl, -24
	call	__frameset
	ld	iy, (ix + 6)
	xor	a, a
	ld	hl, -64
	ld	(ix - 6), hl
	sbc	hl, hl
	lea	bc, iy + 5
	ld	iy, 13
	ld	(ix - 9), bc
	ld	c, iyl
	ld	de, -13
	ld	(ix - 3), de
BB4_1:
	ld	(ix - 13), a
	ld	b, a
	call	__bdivu
	ld	d, a
	ld	(ix - 12), de
	ld	(ix - 19), hl
	lea	bc, iy
	call	__idivu
	lea	de, iy
	push	hl
	pop	iy
	ld	bc, 104
	call	__imulu
	ld	bc, (ix - 6)
	ld	a, c
	sub	a, l
	lea	hl, iy
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	ld	hl, -12
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	push	bc
	pop	hl
	ld	de, 39
	or	a, a
	sbc	hl, de
	jp	z, BB4_17
	ld	(ix - 24), a
	ld	(ix - 23), iy
	ld	hl, (ix - 12)
	mlt	hl
	ld	d, (ix - 13)
	ld	a, d
	add	a, l
	ld	e, a
	add	a, -11
	ld	iyl, a
	ld	(ix - 20), e
	ld	a, e
	cp	a, 8
	jr	nc, BB4_4
	ld	a, d
	add	a, l
	add	a, 50
	jr	BB4_8
BB4_4:
	push	bc
	pop	hl
	ld	de, (ix - 16)
	add	hl, de
	ld	de, 17
	add	hl, de
	ld	de, 3
	or	a, a
	sbc	hl, de
	jr	nc, BB4_6
	ld	hl, 5327444
	ld	c, (ix - 24)
	call	__ishru
	ld	a, l
	jr	BB4_8
BB4_6:
	ld	a, iyl
	or	a, a
	ld	a, 75
	jr	z, BB4_8
	ld	a, 65
BB4_8:
	ld	iy, (ix - 9)
	ld	(iy - 5), a
	ld	hl, (ix - 23)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 83
	jr	c, BB4_12
	ld	hl, (ix - 3)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 72
	jr	c, BB4_12
	ld	hl, (ix - 3)
	ld	de, -13
	add	hl, de
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 67
	jr	c, BB4_12
	ld	a, 68
BB4_12:
	ld	iy, (ix - 9)
	ld	(iy - 4), a
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	push	hl
	pop	iy
	ld	de, 27
	add	iy, de
	ld	de, -13
	or	a, a
	sbc	hl, de
	ld	hl, 11
	jr	z, BB4_14
	ld	hl, 10
BB4_14:
	ld	a, (ix - 20)
	cp	a, 8
	lea	bc, iy
	jr	c, BB4_16
	push	hl
	pop	bc
BB4_16:
	ld	iy, (ix - 9)
	ld	(iy - 3), bc
	ld	(iy), 0
	ld	(iy + 1), 0
	lea	de, iy
	ld	hl, (ix - 19)
	inc	hl
	ld	bc, (ix - 3)
	inc	bc
	ld	(ix - 3), bc
	ld	a, (ix - 13)
	inc	a
	ld	bc, 8
	ld	iy, (ix - 6)
	add	iy, bc
	ld	(ix - 6), iy
	push	de
	pop	iy
	lea	iy, iy + 7
	ld	(ix - 9), iy
	ld	de, (ix - 12)
	ld	c, 13
	ld	iy, 13
	jp	BB4_1
BB4_17:
	ld	de, 364
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	add	iy, de
	ld	de, 52
	ld	(iy), de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_card
_print_card:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 15)
	ld	de, (ix + 18)
	ld	l, (ix + 11)
	bit	0, l
	jr	nz, BB5_3
	ld	a, (ix + 12)
	or	a, a
	jr	nz, BB5_3
	push	de
	push	iy
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	jr	BB5_8
BB5_3:
	ld	e, 62
	ld	c, 60
	ld	a, l
	xor	a, 1
	bit	0, a
	ld	l, e
	jr	nz, BB5_5
	ld	l, c
BB5_5:
	ld	(ix - 3), bc
	ld	(ix - 6), hl
	ld	bc, -8
	bit	0, a
	jr	nz, BB5_7
	ld	l, e
	ld	(ix - 3), hl
BB5_7:
	lea	hl, iy
	add	hl, bc
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (ix + 18)
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	de, 16
	ld	hl, (ix + 15)
	add	hl, de
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
BB5_8:
	push	hl
	call	_gfx_PrintChar
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_playing_card
_print_playing_card:
	call	__frameset0
	ld	hl, (ix + 15)
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_playing_value
_print_playing_value:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 43
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (ix - 3)
	ld	(ix + 6), hl
	ld	(ix + 9), 1
	pop	hl
	pop	ix
	jp	_gfx_PrintInt
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_stats
_print_hand_stats:
	call	__frameset0
	ld	de, (ix + 15)
	ld	hl, (ix + 18)
	ld	bc, 16
	add	hl, bc
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix + 9)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (ix + 12)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_type
_print_hand_type:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 6
	ld	(ix - 3), hl
	ld	hl, (ix + 15)
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	de, (ix + 6)
	ld	bc, 10
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB9_2
	ld	iy, _switch.table.print_hand_type
	ld	bc, 3
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	jr	BB9_3
BB9_2:
	ld	hl, _.str.11
BB9_3:
	push	hl
	call	_gfx_PrintString
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, (ix + 15)
	ld	(iy + 9), hl
	ld	hl, (ix + 18)
	ld	(iy + 12), hl
	call	_print_hand_stats
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_game_stats
_display_game_stats:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 18
	ld	(ix - 3), hl
	ld	de, 10
	ld	hl, 20
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 52
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.12
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.13
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, 10
	ld	(iy + 9), hl
	ld	hl, 78
	ld	(iy + 12), hl
	call	_print_hand_type
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_hand
_display_hand:
	ld	hl, -12
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, 74
	ld	(ix - 6), hl
	ld	bc, 0
	lea	hl, iy + 9
	ld	(ix - 3), hl
BB11_1:
	ld	de, (iy + 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB11_6
	ld	(ix - 9), bc
	ld	iy, (ix - 3)
	bit	0, (iy + 5)
	jr	nz, BB11_4
	bit	0, (iy + 6)
	ld	hl, 200
	jr	z, BB11_5
BB11_4:
	ld	hl, 184
BB11_5:
	ld	(ix - 12), hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	lea	hl, iy
	ld	(ix - 3), hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	bc, 7
	ldir
	ld	hl, (ix - 6)
	ld	(iy + 9), hl
	ld	hl, (ix - 12)
	ld	(iy + 12), hl
	call	_print_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 32
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
	lea	iy, iy + 7
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	jr	BB11_1
BB11_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_cards_to_hand
_draw_cards_to_hand:
	ld	hl, -9
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB12_2
	ld	de, 0
BB12_2:
	ld	iy, (ix + 6)
	lea	hl, iy + 11
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	push	de
	pop	iy
	push	hl
	pop	bc
BB12_3:
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	z, BB12_14
	ld	(ix - 9), bc
	lea	bc, iy
	ld	(ix - 3), bc
BB12_5:
	ld	hl, (ix + 15)
	ld	hl, (hl)
	ld	de, 52
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB12_7
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 15)
	ld	(iy), hl
	ld	hl, (ix + 12)
	push	hl
	call	_shuffle_deck
	pop	hl
BB12_7:
	ld	hl, (ix + 6)
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB12_9
	ld	de, 0
BB12_9:
	ld	iy, (ix - 6)
BB12_10:
	ld	bc, (ix - 3)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB12_5
	ld	hl, (iy)
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jr	z, BB12_13
	lea	iy, iy + 7
	dec	de
	jr	BB12_10
BB12_13:
	lea	de, iy - 2
	ld	hl, (ix + 15)
	push	hl
	pop	iy
	ld	hl, (iy)
	push	hl
	pop	bc
	inc	bc
	ld	(iy), bc
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	add	hl, bc
	ld	bc, 7
	ldir
	ld	iy, (ix - 3)
	ld	bc, (ix - 9)
	inc	bc
	jp	BB12_3
BB12_14:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	de, (ix + 9)
	add	hl, de
	ld	(iy + 3), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_get_hand_type
_get_hand_type:
	ld	hl, -463
	call	__frameset
	ld	de, (ix + 9)
	ld	hl, (ix + 12)
	ld	bc, 7
	xor	a, a
	ld	(ix - 3), de
	ld	de, -411
	lea	iy, ix
	add	iy, de
	ld	(iy), a
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	ld	sp, hl
	push	ix
	inc	de
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	bc
	ld	de, (ix - 3)
	push	de
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	call	_memcpy
	ld	de, 0
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 44), de
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_2
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	(iy + 3), de
	ld	(iy + 6), de
	jr	BB13_4
BB13_2:
	ld	de, -6
	ld	bc, 9
	ld	iy, _hand_table
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, -4
	or	a, a
	sbc	hl, de
	jr	nc, BB13_5
	lea	hl, iy
	ld	iy, (ix + 6)
	lea	de, iy
	ldir
	ld	hl, (ix + 12)
	ld	(iy + 44), hl
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	pea	iy + 9
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB13_4:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
BB13_5:
	ld	de, -195
	lea	hl, ix
	add	hl, de
	ld	de, -435
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -404
	lea	iy, ix
	add	iy, de
	lea	hl, iy + 14
	push	ix
	ld	de, -410
	add	ix, de
	ld	(ix), hl
	pop	ix
	lea	hl, iy + 2
	push	ix
	ld	de, -438
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	lea	hl, iy
	ld	de, -457
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	bc, (ix + 12)
	dec	bc
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 7
	ld	de, 0
	ld	(ix - 3), de
	push	ix
	ld	de, -432
	add	ix, de
	ld	(ix), bc
BB13_6:
	pop	ix
	ld	de, (ix - 3)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB13_13
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	push	de
	pop	iy
	inc	iy
	ex	de, hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	de, -420
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -426
	add	ix, de
	ld	(ix), iy
	pop	ix
	lea	hl, iy
	ld	de, (ix + 12)
BB13_8:
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB13_12
	ld	(ix - 3), de
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, (hl)
	ld	de, -429
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	push	bc
	pop	hl
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (hl)
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB13_11
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -410
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	de, (ix + 12)
BB13_11:
	lea	hl, iy
	inc	hl
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 7
	lea	bc, iy
	jp	BB13_8
BB13_12:
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	(ix - 3), de
	push	ix
	ld	de, -432
	add	ix, de
	ld	bc, (ix)
	jp	BB13_6
BB13_13:
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(iy + 14), 0
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	hl
	pop	iy
	inc	iy
	ld	bc, 383
	lea	de, iy
	ldir
	ld	de, 1
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	dec	de
	jp	p, BB13_15
	push	de
	pop	bc
BB13_15:
	ld	(ix - 3), de
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	inc	iy
	push	ix
	ld	de, -426
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	bc
	pop	hl
	ld	de, (ix - 3)
	push	ix
	ld	bc, -429
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -417
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	(ix), de
	pop	ix
BB13_16:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_27
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	a, (iy - 1)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -410
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ld	de, (hl)
	inc	de
	ld	(hl), de
	ld	bc, (ix - 3)
	lea	bc, iy
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	lea	hl, iy
	ld	de, 67
	or	a, a
	sbc	hl, de
	jr	nz, BB13_19
	ld	de, -417
	jr	BB13_25
BB13_19:
	lea	hl, iy
	ld	de, 68
	or	a, a
	sbc	hl, de
	jr	nz, BB13_21
	ld	de, -420
	jr	BB13_25
BB13_21:
	lea	hl, iy
	ld	de, 72
	or	a, a
	sbc	hl, de
	jr	nz, BB13_23
	ld	de, -423
	jr	BB13_25
BB13_23:
	lea	hl, iy
	ld	de, 83
	or	a, a
	sbc	hl, de
	jr	nz, BB13_26
	ld	de, -429
BB13_25:
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
BB13_26:
	ld	de, 0
	push	bc
	pop	iy
	lea	iy, iy + 7
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	jp	BB13_16
BB13_27:
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(iy + 11), hl
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 8), hl
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 5), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 2), hl
	ld	bc, 4
	push	de
	pop	hl
	ld	(ix - 3), bc
	ld	bc, -438
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (ix - 3)
BB13_28:
	ld	(ix - 3), de
	push	ix
	ld	de, -420
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB13_31
	ld	hl, (iy)
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB13_32
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, iy + 3
	ld	bc, 4
	jr	BB13_28
BB13_31:
	ld	bc, -463
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB13_33
BB13_32:
	ld	(ix - 3), de
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	hl, _.str.14
	add	hl, bc
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -463
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, (ix - 3)
BB13_33:
	ld	bc, 9
	ld	iy, ___const.get_hand_type.straight_ranks
	push	de
	pop	hl
BB13_34:
	ld	(ix - 3), de
	push	ix
	ld	de, -417
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB13_38
BB13_35:
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB13_39
	lea	hl, iy
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -410
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	bc, 9
	ld	hl, (hl)
	ld	de, (ix - 3)
	inc	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_35
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	inc	iy
	ld	de, 0
	jr	BB13_34
BB13_38:
	ld	bc, -460
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB13_40
BB13_39:
	ld	hl, ___const.get_hand_type.straight_ranks
	push	hl
	pop	iy
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	a, (iy + 4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -460
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 0
BB13_40:
	ld	hl, _.str.15
	ld	bc, -435
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (iy)
	ld	(ix - 3), de
	push	ix
	ld	de, -447
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 45)
	push	ix
	ld	de, -444
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 42)
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 39)
	push	ix
	ld	de, -438
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 36)
	ld	de, -435
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -414
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld.sis	bc, 0
	ld	(iy), c
	ld	(iy + 1), b
	ld	de, (ix - 3)
	push	de
	pop	bc
	ld	(ix - 3), bc
	ld	bc, -450
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	bc, -453
	add	ix, bc
	ld	(ix), de
	pop	ix
	xor	a, a
	push	ix
	ld	de, -454
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	bc, (ix - 3)
BB13_41:
	ld	de, -423
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB13_53
	ld	bc, -429
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -410
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	nz, BB13_46
	ld	(ix - 3), de
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	lea	bc, iy
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB13_45
	ld	(ix - 3), de
	ld	de, -457
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	de, (ix - 3)
	ld	(hl), e
BB13_45:
	inc	bc
	ld	de, -429
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	jr	BB13_52
BB13_46:
	lea	hl, iy
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	inc	bc
	jr	nz, BB13_48
	ld	bc, -450
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -411
	jr	BB13_50
BB13_48:
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_51
	ld	bc, -453
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	dec	bc
BB13_50:
	lea	hl, ix
	add	hl, bc
	ld	(hl), e
	push	ix
	ld	de, -429
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -423
	add	ix, de
	ld	bc, (ix)
	pop	ix
	jr	BB13_52
BB13_51:
	ld	de, -429
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, -423
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
BB13_52:
	inc	hl
	jp	BB13_41
BB13_53:
	ld	hl, (ix + 12)
	ld	de, 5
	or	a, a
	sbc	hl, de
	ld	e, -1
	ld	iyl, d
	ld	iyh, e
	jr	z, BB13_55
	ld	iyh, iyl
BB13_55:
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	l, a
	ld	a, iyh
	and	a, l
	ld	bc, -447
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB13_57
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB13_57:
	and	a, l
	ld	bc, -444
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB13_59
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB13_59:
	and	a, l
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB13_61
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB13_61:
	and	a, l
	ld	bc, -438
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB13_63
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB13_63:
	and	a, l
	ld	bc, -435
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_65
	ld	e, iyl
BB13_65:
	and	a, e
	ld	b, a
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 9
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, b
	or	a, l
	ld	l, a
	ld	a, iyh
	ex	de, hl
	ld	iyl, e
	ex	de, hl
	and	a, l
	ld	c, a
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, c
	and	a, l
	bit	0, a
	jp	z, BB13_71
	bit	0, b
	jp	nz, BB13_71
	ld	bc, 65
	ld	de, -460
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	jp	nz, BB13_71
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table+81
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB13_69:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB13_4
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	ix
	ld	de, -407
	add	ix, de
	ld	iy, (ix)
	pop	ix
	add	iy, bc
	lea	hl, iy
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB13_69
BB13_71:
	bit	0, a
	jp	z, BB13_75
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table+72
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB13_73:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB13_4
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	ix
	ld	de, -407
	add	ix, de
	ld	iy, (ix)
	pop	ix
	add	iy, bc
	lea	hl, iy
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB13_73
BB13_75:
	ld	de, -453
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 9
	jp	nz, BB13_84
	ld	de, -450
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_89
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_89
	ld	hl, (ix + 6)
	ex	de, hl
	ld	hl, _hand_table+54
	ld	bc, 9
	ldir
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB13_79:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	jr	z, BB13_82
	cp	a, e
	jr	nz, BB13_83
BB13_82:
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB13_83:
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB13_79
BB13_84:
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table+63
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB13_85:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	ld	bc, -454
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB13_88
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB13_88:
	lea	iy, iy + 7
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB13_85
BB13_89:
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	jp	nc, BB13_95
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table+45
	ld	bc, 9
	ldir
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	inc	iy
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB13_91:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, -463
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	or	a, a
	sbc	hl, de
	jr	nz, BB13_94
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	ld	bc, -410
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	ld	de, (ix - 3)
	ldir
BB13_94:
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	dec	hl
	jp	BB13_91
BB13_95:
	ld	a, iyl
	bit	0, a
	jp	z, BB13_99
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table+36
	ld	bc, 9
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
BB13_97:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	lea	iy, iy + 7
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	dec	de
	jr	BB13_97
BB13_99:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_105
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table+27
	ld	bc, 9
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB13_101:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	ld	bc, -411
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB13_104
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB13_104:
	lea	iy, iy + 7
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB13_101
BB13_105:
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	bc, 9
	jp	m, BB13_112
	ld	hl, (ix + 6)
	ex	de, hl
	ld	hl, _hand_table+18
	ldir
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	a, (iy + 1)
	ld	bc, -410
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB13_107:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	z, BB13_110
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	jr	nz, BB13_111
BB13_110:
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB13_111:
	lea	iy, iy + 7
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB13_107
BB13_112:
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	jp	nz, BB13_118
	ld	hl, (ix + 6)
	ex	de, hl
	ld	hl, _hand_table+9
	ldir
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB13_114:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	nz, BB13_117
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB13_117:
	lea	iy, iy + 7
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB13_114
BB13_118:
	ld	de, (ix + 6)
	ld	hl, _hand_table
	push	de
	pop	iy
	ldir
	lea	de, iy + 9
	ld	bc, 7
	ld	(ix - 3), de
	ld	de, -432
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	call	__imulu
	push	hl
	pop	bc
	push	ix
	ld	de, -407
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	hl, 1
	ld	(iy + 44), hl
	jp	BB13_4
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_playing_hand
_display_playing_hand:
	ld	hl, -12
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, (ix + 12)
	ld	hl, (ix + 18)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 12), iy
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB14_2
	ld	de, 0
BB14_2:
	ld	iy, (ix + 6)
	ld	bc, 120
BB14_3:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB14_8
	ld	(ix - 9), de
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	lea	hl, iy
	ld	(ix - 3), bc
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	(ix - 6), hl
	ld	bc, 7
	ldir
	ld	hl, (ix - 3)
	ld	(iy + 9), hl
	ld	hl, 100
	ld	(iy + 12), hl
	call	_print_playing_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 18)
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB14_7
	ld	hl, (ix - 12)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	call	_card_equal
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB14_7
	ld	iy, (ix - 12)
	ld	hl, (iy + 2)
	ld	de, 76
	push	de
	ld	de, (ix - 3)
	push	de
	push	hl
	call	_print_playing_value
	pop	hl
	pop	hl
	pop	hl
BB14_7:
	ld	iy, (ix - 6)
	lea	iy, iy + 7
	ld	de, 32
	ld	hl, (ix - 3)
	add	hl, de
	ld	de, (ix - 9)
	dec	de
	push	hl
	pop	bc
	jp	BB14_3
BB14_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handle_draw_scoring
_handle_draw_scoring:
	ld	hl, -27
	call	__frameset
	ld	bc, (ix + 12)
	ld	iy, (ix + 18)
	scf
	sbc	hl, hl
	ld	de, (iy + 3)
	ld	(ix - 18), de
	push	hl
	push	hl
	push	bc
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_display_playing_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 500
	push	hl
	call	_wait_frames
	pop	hl
	ld	de, 1
	ld	hl, (ix + 15)
	or	a, a
	sbc	hl, de
	dec	de
	call	pe, __setflag
	ld	hl, (ix + 15)
	ld	(ix - 12), hl
	ld	bc, (ix + 15)
	jp	p, BB15_2
	push	de
	pop	bc
BB15_2:
	ld	iy, 2
	lea	hl, ix - 9
	ld	(ix - 21), hl
	ld	hl, (ix - 12)
	dec	hl
	ld	(ix - 12), hl
BB15_3:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	z, BB15_7
	ld	(ix - 24), bc
	ld	(ix - 15), de
	ld	(ix - 27), iy
	lea	de, iy
	ld	hl, (ix + 12)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 18)
	add	hl, de
	ld	(ix - 18), hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (ix + 21)
	push	hl
	call	_display_hand
	pop	hl
	ld	de, (ix - 21)
	ld	hl, (ix + 18)
	ld	bc, 9
	ldir
	ld	hl, (ix - 18)
	ld	(ix - 6), hl
	ld	hl, (ix - 15)
	push	hl
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_display_playing_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	hl, (ix - 21)
	ld	bc, 9
	ldir
	ld	hl, (ix + 33)
	push	hl
	ld	hl, (ix + 30)
	push	hl
	ld	hl, (ix + 27)
	push	hl
	ld	hl, (ix + 24)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, (ix - 12)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	hl, 500
	jr	z, BB15_6
	ld	hl, 250
BB15_6:
	push	hl
	call	_wait_frames
	pop	hl
	ld	de, (ix - 15)
	inc	de
	ld	bc, 7
	ld	iy, (ix - 27)
	add	iy, bc
	ld	bc, (ix - 24)
	jp	BB15_3
BB15_7:
	ld	iy, (ix + 18)
	ld	hl, (iy + 6)
	ld	bc, (ix - 18)
	call	__imulu
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -584
	call	__frameset
	ld	bc, -523
	lea	iy, ix
	add	iy, bc
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	hl, 0
	ld	de, 4
	push	ix
	ld	bc, -557
	add	ix, bc
	ld	(ix), de
	pop	ix
	dec	de
	push	ix
	ld	bc, -554
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -373
	add	ix, bc
	lea	de, ix
	pop	ix
	push	ix
	ld	bc, -538
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 85
	push	ix
	ld	bc, -526
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 47
	push	ix
	ld	bc, -544
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy
	ld	bc, -541
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	hl
	call	_time
	pop	de
	push	hl
	call	_srand
	pop	hl
	call	_gfx_Begin
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -538
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_create_deck
	pop	hl
	ld	bc, -538
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_shuffle_deck
	pop	hl
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 3
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 88), 0
	push	hl
	pop	de
	inc	de
	ld	bc, 61
	ldir
	ld	hl, 8
	push	ix
	ld	bc, -532
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	(iy + 85), hl
	ld	iy, 11
	ld	de, 67
BB16_1:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	z, BB16_3
	lea	bc, iy
	lea	de, iy
	ld	(ix - 3), de
	ld	de, -526
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	add	iy, bc
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	de, (ix - 3)
	push	de
	pop	iy
	ld	de, 67
	ld	bc, 7
	add	iy, bc
	jr	BB16_1
BB16_3:
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	or	a, a
	sbc	hl, hl
	ld	(iy + 82), hl
	ld	bc, -526
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	de, iy + 15
	ld	bc, -566
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	bc, -551
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	pop	iy
	push	ix
	ld	bc, -563
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -548
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	pop	de
	xor	a, a
	ld	c, a
	inc	l
BB16_4:
	ld	a, l
	and	a, 1
	bit	0, a
	jp	z, BB16_57
	ld	(ix - 3), de
	push	ix
	ld	de, -572
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	de, -560
	lea	iy, ix
	add	iy, de
	ld	(iy), c
	ld	de, (ix - 3)
	push	ix
	ld	bc, -535
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -545
	add	ix, bc
	ld	(ix), l
	pop	ix
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (_frame_timer)
	inc	hl
	ld	(_frame_timer), hl
	call	_kb_Scan
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 88)
	push	de
	pop	hl
	ld	(ix - 3), de
	ld	de, -532
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB16_7
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pea	iy + 82
	ld	bc, -538
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	push	hl
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_draw_cards_to_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB16_7:
	ld	hl, -720878
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -578
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	(iy + 14), 1
	ld	de, (ix - 3)
	ld	bc, -569
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	a, e
	bit	5, a
	jp	z, BB16_15
	ld	bc, -548
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	bit	5, a
	jp	nz, BB16_15
	ld	de, -535
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -532
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	a, (iy + 15)
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, (iy + 91)
	bit	0, a
	jr	nz, BB16_12
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB16_12
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 1
	ld	hl, 1
	jr	BB16_14
BB16_12:
	bit	0, a
	jr	z, BB16_15
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 0
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	hl, -1
	jp	m, BB16_15
BB16_14:
	add	hl, de
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 91), hl
BB16_15:
	ld	de, -529
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	bc, (iy + 85)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	de, -532
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jp	p, BB16_17
	ld	bc, 0
BB16_17:
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), bc
	ld	bc, -569
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	l, e
	ld	h, d
	push	ix
	ld	de, -548
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	de, -575
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -566
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld	de, 0
BB16_18:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_22
	bit	0, (iy)
	jp	z, BB16_21
	lea	hl, iy - 6
	ld	(ix - 3), bc
	push	ix
	ld	bc, -584
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	de
	pop	hl
	inc	hl
	push	ix
	ld	bc, -581
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ex	de, hl
	ld	bc, (ix - 3)
	push	ix
	ld	de, -569
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -544
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ex	de, hl
	ld	bc, -584
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, (ix - 3)
	ld	bc, 7
	ldir
	ld	de, -569
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -581
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB16_21:
	lea	iy, iy + 7
	dec	bc
	jp	BB16_18
BB16_22:
	ld	bc, -581
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	ld	bc, -544
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	hl
	ld	bc, -541
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_get_hand_type
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -720874
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	bc, -569
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	jp	z, BB16_31
	ld	bc, -551
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	a, e
	bit	7, a
	jr	nz, BB16_31
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 91)
	ld	bc, -554
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB16_31
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB16_31
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 88)
	ld	bc, -575
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -566
	add	ix, bc
	ld	iy, (ix)
	pop	ix
BB16_27:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_42
	bit	0, (iy)
	jr	z, BB16_30
	ld	bc, -1
	ld	(iy - 4), bc
	ld	(iy), 0
	ld	(iy - 1), 0
	dec	de
BB16_30:
	lea	iy, iy + 7
	dec	hl
	jr	BB16_27
BB16_31:
	ld	de, -532
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	ld	bc, -572
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
BB16_32:
	ld	bc, (ix - 3)
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	(ix - 3), bc
	ld	bc, -572
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	ld	bc, (ix - 3)
	jp	z, BB16_44
	ld	a, e
	bit	7, a
	jp	nz, BB16_44
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 91)
	ld	bc, -557
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB16_41
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, -532
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	jp	m, BB16_44
	ld	de, -566
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	de, -575
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
BB16_37:
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB16_43
	bit	0, (iy)
	jr	z, BB16_40
	scf
	sbc	hl, hl
	ld	(iy - 4), hl
	ld	(iy), 0
	ld	(iy - 1), 0
	inc	bc
BB16_40:
	lea	iy, iy + 7
	ex	de, hl
	dec	hl
	jr	BB16_37
BB16_41:
	ld	de, -532
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	jp	BB16_44
BB16_42:
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 88), de
	or	a, a
	sbc	hl, hl
	ld	(iy + 91), hl
	ld	de, -554
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	dec	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -532
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -572
	add	ix, bc
	ld	de, (ix)
	pop	ix
	jp	BB16_32
BB16_43:
	ld	de, -529
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	or	a, a
	sbc	hl, hl
	ld	(iy + 91), hl
	ld	de, -551
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -557
	add	ix, de
	ld	bc, (ix)
	pop	ix
	dec	bc
	ld	hl, (iy + 44)
	ld	(ix - 3), bc
	ld	bc, -554
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	ld	bc, (ix - 3)
	push	ix
	ld	de, -557
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	bc
	ld	de, 0
	push	de
	push	ix
	ld	bc, -563
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -526
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -541
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	push	iy
	push	hl
	pea	iy + 9
	ld	bc, -581
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -544
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_handle_draw_scoring
	ld	de, -532
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	ld	iy, 30
	add	iy, sp
	ld	sp, iy
	ld	(ix - 3), bc
	ld	bc, -563
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 88)
	push	ix
	ld	bc, -551
	add	ix, bc
	ld	de, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	(iy + 88), hl
	ld	bc, (ix - 3)
BB16_44:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, iyl
	ld	de, -560
	lea	hl, ix
	add	hl, de
	bit	1, a
	jr	nz, BB16_46
	ld	l, (hl)
	jr	BB16_50
BB16_46:
	ld	l, (hl)
	bit	1, l
	jr	nz, BB16_50
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB16_49
	dec	de
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	de, -578
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy + 14), 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
BB16_49:
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	l, (hl)
	push	ix
	ld	de, -532
	add	ix, de
	ld	bc, (ix)
	pop	ix
BB16_50:
	ld	a, iyl
	bit	2, a
	push	ix
	ld	de, -575
	push	af
	add	ix, de
	pop	af
	ld	(ix), iy
	pop	ix
	jr	z, BB16_54
	bit	2, l
	jr	nz, BB16_54
	push	bc
	pop	de
	dec	de
	ld	(ix - 3), de
	ld	de, -535
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB16_54
	push	bc
	pop	de
	inc	de
	push	bc
	pop	hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	ld	(iy + 14), 0
	ld	de, (ix - 3)
	ld	bc, -535
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
BB16_54:
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -541
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	bc, -554
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -563
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB16_56
	xor	a, a
	ld	bc, -545
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
BB16_56:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	push	bc
	pop	de
	ld	(ix - 3), bc
	ld	bc, -569
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	e, l
	ld	d, h
	ld	bc, -551
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	de, -572
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	ld	bc, (ix - 3)
	ld	c, l
	ld	b, h
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	call	_gfx_SwapDraw
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -575
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	c, l
	ld	de, -545
	lea	hl, ix
	add	hl, de
	ld	l, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -535
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
	jp	BB16_4
BB16_57:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_frame_timer
_frame_timer:
	rb	3

	section	.data,"aw",@progbits
	public	_hand_table
_hand_table:
	dl	0
	dl	5
	dl	1
	dl	1
	dl	10
	dl	2
	dl	2
	dl	20
	dl	2
	dl	3
	dl	30
	dl	3
	dl	4
	dl	30
	dl	4
	dl	5
	dl	35
	dl	4
	dl	6
	dl	40
	dl	4
	dl	7
	dl	60
	dl	7
	dl	8
	dl	100
	dl	8
	dl	9
	dl	100
	dl	8

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	" x ", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"High Card", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"Two Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"Three of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"Straight", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"Full House", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"Four of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"Straight Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"Royal Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"H: ", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	" D: ", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"SHCD", 0

	section	.rodata,"a",@progbits
	private	___const.get_hand_type.straight_ranks
___const.get_hand_type.straight_ranks:
	db	"23456789TJQKA"

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"23456789TJQKA", 0

	section	.rodata,"a",@progbits
	private	_switch.table.print_hand_type
_switch.table.print_hand_type:
	dl	_.str.1
	dl	_.str.2
	dl	_.str.3
	dl	_.str.4
	dl	_.str.5
	dl	_.str.6
	dl	_.str.7
	dl	_.str.8
	dl	_.str.9
	dl	_.str.10

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	_gfx_PrintChar
	extern	_srand
	extern	__Unwind_SjLj_Register
	extern	_gfx_Begin
	extern	_rand
	extern	_gfx_PrintString
	extern	_memcpy
	extern	_gfx_PrintInt
	extern	__idivu
	extern	__setflag
	extern	_time
	extern	__bdivu
	extern	__frameset
	extern	_kb_Scan
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	__irems
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Wait
	extern	_gfx_End
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
