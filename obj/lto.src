	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_card_equal
_card_equal:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, 0
	push	hl
	pop	bc
	ld	l, (hl)
	ld	a, (iy)
	cp	a, l
	jr	nz, BB0_5
	ld	iy, (ix + 6)
	ld	hl, (iy + 2)
	push	bc
	pop	iy
	ld	bc, (iy + 2)
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_5
	ld	l, (iy + 1)
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	cp	a, l
	jr	z, BB0_4
	ld	de, 0
	jr	BB0_5
BB0_4:
	ld	de, 1
BB0_5:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_wait_frames
_wait_frames:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
BB1_1:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB1_3
	ld	(ix - 3), hl
	call	_kb_Scan
	call	_gfx_Wait
	ld	hl, (ix - 3)
	dec	hl
	jr	BB1_1
BB1_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_randomIntRange
_randomIntRange:
	call	__frameset0
	call	_rand
	push	hl
	pop	de
	ld	hl, 1
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, (ix + 9)
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__irems
	ld	de, (ix + 6)
	add	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_shuffle_deck
_shuffle_deck:
	ld	hl, -19
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 7
	lea	hl, ix - 7
	ld	(ix - 13), hl
	ld	de, 364
	lea	hl, iy
	add	hl, de
	ld	de, (hl)
	push	de
	pop	hl
	call	__imulu
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy - 7
	ld	(ix - 10), hl
	ld	de, 2
BB3_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB3_3
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 16), hl
	ld	(ix - 19), bc
	call	_rand
	ld	bc, (ix - 19)
	call	__irems
	ld	(ix - 19), hl
	ld	de, (ix - 13)
	ld	hl, (ix - 10)
	ld	iy, 7
	lea	bc, iy
	ldir
	ld	hl, (ix - 19)
	lea	bc, iy
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (ix - 10)
	lea	hl, iy
	ld	bc, 7
	ldir
	lea	de, iy
	ld	hl, (ix - 13)
	ld	bc, 7
	ldir
	ld	de, 2
	ld	iy, (ix - 10)
	lea	iy, iy - 7
	ld	(ix - 10), iy
	ld	bc, (ix - 16)
	jr	BB3_1
BB3_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_create_deck
_create_deck:
	ld	hl, -24
	call	__frameset
	ld	iy, (ix + 6)
	xor	a, a
	ld	hl, -64
	ld	(ix - 6), hl
	sbc	hl, hl
	lea	bc, iy + 5
	ld	iy, 13
	ld	(ix - 9), bc
	ld	c, iyl
	ld	de, -13
	ld	(ix - 3), de
BB4_1:
	ld	(ix - 13), a
	ld	b, a
	call	__bdivu
	ld	d, a
	ld	(ix - 12), de
	ld	(ix - 19), hl
	lea	bc, iy
	call	__idivu
	lea	de, iy
	push	hl
	pop	iy
	ld	bc, 104
	call	__imulu
	ld	bc, (ix - 6)
	ld	a, c
	sub	a, l
	lea	hl, iy
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	ld	hl, -12
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	push	bc
	pop	hl
	ld	de, 39
	or	a, a
	sbc	hl, de
	jp	z, BB4_17
	ld	(ix - 24), a
	ld	(ix - 23), iy
	ld	hl, (ix - 12)
	mlt	hl
	ld	d, (ix - 13)
	ld	a, d
	add	a, l
	ld	e, a
	add	a, -11
	ld	iyl, a
	ld	(ix - 20), e
	ld	a, e
	cp	a, 8
	jr	nc, BB4_4
	ld	a, d
	add	a, l
	add	a, 50
	jr	BB4_8
BB4_4:
	push	bc
	pop	hl
	ld	de, (ix - 16)
	add	hl, de
	ld	de, 17
	add	hl, de
	ld	de, 3
	or	a, a
	sbc	hl, de
	jr	nc, BB4_6
	ld	hl, 5327444
	ld	c, (ix - 24)
	call	__ishru
	ld	a, l
	jr	BB4_8
BB4_6:
	ld	a, iyl
	or	a, a
	ld	a, 75
	jr	z, BB4_8
	ld	a, 65
BB4_8:
	ld	iy, (ix - 9)
	ld	(iy - 5), a
	ld	hl, (ix - 23)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 83
	jr	c, BB4_12
	ld	hl, (ix - 3)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 72
	jr	c, BB4_12
	ld	hl, (ix - 3)
	ld	de, -13
	add	hl, de
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 67
	jr	c, BB4_12
	ld	a, 68
BB4_12:
	ld	iy, (ix - 9)
	ld	(iy - 4), a
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	push	hl
	pop	iy
	ld	de, 27
	add	iy, de
	ld	de, -13
	or	a, a
	sbc	hl, de
	ld	hl, 11
	jr	z, BB4_14
	ld	hl, 10
BB4_14:
	ld	a, (ix - 20)
	cp	a, 8
	lea	bc, iy
	jr	c, BB4_16
	push	hl
	pop	bc
BB4_16:
	ld	iy, (ix - 9)
	ld	(iy - 3), bc
	ld	(iy), 0
	ld	(iy + 1), 0
	lea	de, iy
	ld	hl, (ix - 19)
	inc	hl
	ld	bc, (ix - 3)
	inc	bc
	ld	(ix - 3), bc
	ld	a, (ix - 13)
	inc	a
	ld	bc, 8
	ld	iy, (ix - 6)
	add	iy, bc
	ld	(ix - 6), iy
	push	de
	pop	iy
	lea	iy, iy + 7
	ld	(ix - 9), iy
	ld	de, (ix - 12)
	ld	c, 13
	ld	iy, 13
	jp	BB4_1
BB4_17:
	ld	de, 364
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	add	iy, de
	ld	de, 52
	ld	(iy), de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_main_menu
_draw_main_menu:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 40
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 100
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.1
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 132
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 164
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, _.str.3
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_rules_menu
_draw_rules_menu:
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_card
_print_card:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 15)
	ld	de, (ix + 18)
	ld	l, (ix + 11)
	bit	0, l
	jr	nz, BB7_3
	ld	a, (ix + 12)
	or	a, a
	jr	nz, BB7_3
	push	de
	push	iy
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	jr	BB7_8
BB7_3:
	ld	e, 62
	ld	c, 60
	ld	a, l
	xor	a, 1
	bit	0, a
	ld	l, e
	jr	nz, BB7_5
	ld	l, c
BB7_5:
	ld	(ix - 3), bc
	ld	(ix - 6), hl
	ld	bc, -8
	bit	0, a
	jr	nz, BB7_7
	ld	l, e
	ld	(ix - 3), hl
BB7_7:
	lea	hl, iy
	add	hl, bc
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (ix + 18)
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	de, 16
	ld	hl, (ix + 15)
	add	hl, de
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
BB7_8:
	push	hl
	call	_gfx_PrintChar
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_playing_card
_print_playing_card:
	call	__frameset0
	ld	hl, (ix + 15)
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_playing_value
_print_playing_value:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	ld	bc, -8
	add	hl, bc
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 43
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (ix - 3)
	ld	(ix + 6), hl
	ld	(ix + 9), 1
	pop	hl
	pop	ix
	jp	_gfx_PrintInt
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_stats
_print_hand_stats:
	call	__frameset0
	ld	de, (ix + 15)
	ld	hl, (ix + 18)
	ld	bc, 16
	add	hl, bc
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix + 9)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.4
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (ix + 12)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_type
_print_hand_type:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 6
	ld	(ix - 3), hl
	ld	hl, (ix + 15)
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	de, (ix + 6)
	ld	bc, 10
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB11_2
	ld	iy, _switch.table.print_hand_type
	ld	bc, 3
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	jr	BB11_3
BB11_2:
	ld	hl, _.str.15
BB11_3:
	push	hl
	call	_gfx_PrintString
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, (ix + 15)
	ld	(iy + 9), hl
	ld	hl, (ix + 18)
	ld	(iy + 12), hl
	call	_print_hand_stats
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_game_stats
_display_game_stats:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 18
	ld	(ix - 3), hl
	ld	de, 10
	ld	hl, 20
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 52
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.16
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.17
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, 10
	ld	(iy + 9), hl
	ld	hl, 78
	ld	(iy + 12), hl
	call	_print_hand_type
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_hand
_display_hand:
	ld	hl, -12
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, 74
	ld	(ix - 6), hl
	ld	bc, 0
	lea	hl, iy + 9
	ld	(ix - 3), hl
BB13_1:
	ld	de, (iy + 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB13_6
	ld	(ix - 9), bc
	ld	iy, (ix - 3)
	bit	0, (iy + 5)
	jr	nz, BB13_4
	bit	0, (iy + 6)
	ld	hl, 200
	jr	z, BB13_5
BB13_4:
	ld	hl, 184
BB13_5:
	ld	(ix - 12), hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	lea	hl, iy
	ld	(ix - 3), hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	bc, 7
	ldir
	ld	hl, (ix - 6)
	ld	(iy + 9), hl
	ld	hl, (ix - 12)
	ld	(iy + 12), hl
	call	_print_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 32
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
	lea	iy, iy + 7
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	jr	BB13_1
BB13_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_cards_to_hand
_draw_cards_to_hand:
	ld	hl, -9
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB14_2
	ld	de, 0
BB14_2:
	ld	iy, (ix + 6)
	lea	hl, iy + 11
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	push	de
	pop	iy
	push	hl
	pop	bc
BB14_3:
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	z, BB14_14
	ld	(ix - 9), bc
	lea	bc, iy
	ld	(ix - 3), bc
BB14_5:
	ld	hl, (ix + 15)
	ld	hl, (hl)
	ld	de, 52
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB14_7
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 15)
	ld	(iy), hl
	ld	hl, (ix + 12)
	push	hl
	call	_shuffle_deck
	pop	hl
BB14_7:
	ld	hl, (ix + 6)
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB14_9
	ld	de, 0
BB14_9:
	ld	iy, (ix - 6)
BB14_10:
	ld	bc, (ix - 3)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB14_5
	ld	hl, (iy)
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jr	z, BB14_13
	lea	iy, iy + 7
	dec	de
	jr	BB14_10
BB14_13:
	lea	de, iy - 2
	ld	hl, (ix + 15)
	push	hl
	pop	iy
	ld	hl, (iy)
	push	hl
	pop	bc
	inc	bc
	ld	(iy), bc
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	add	hl, bc
	ld	bc, 7
	ldir
	ld	iy, (ix - 3)
	ld	bc, (ix - 9)
	inc	bc
	jp	BB14_3
BB14_14:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	de, (ix + 9)
	add	hl, de
	ld	(iy + 3), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_get_hand_type
_get_hand_type:
	ld	hl, -463
	call	__frameset
	ld	de, (ix + 9)
	ld	hl, (ix + 12)
	ld	bc, 7
	xor	a, a
	ld	(ix - 3), de
	ld	de, -414
	lea	iy, ix
	add	iy, de
	ld	(iy), a
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	ld	sp, hl
	push	ix
	ld	de, -410
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	bc
	ld	de, (ix - 3)
	push	ix
	ld	bc, -413
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	de
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	call	_memcpy
	ld	de, 0
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 44), de
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_2
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	(iy + 3), de
	ld	(iy + 6), de
	jr	BB15_4
BB15_2:
	ld	de, -6
	ld	bc, 9
	ld	iy, _hand_table
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, -4
	or	a, a
	sbc	hl, de
	jr	nc, BB15_5
	lea	hl, iy
	ld	iy, (ix + 6)
	lea	de, iy
	ldir
	ld	hl, (ix + 12)
	ld	(iy + 44), hl
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	pea	iy + 9
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB15_4:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
BB15_5:
	ld	de, -195
	lea	hl, ix
	add	hl, de
	ld	de, -438
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -404
	lea	iy, ix
	add	iy, de
	lea	hl, iy + 14
	push	ix
	ld	de, -410
	add	ix, de
	ld	(ix), hl
	pop	ix
	lea	hl, iy + 2
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	lea	hl, iy
	ld	de, -457
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	bc, (ix + 12)
	dec	bc
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 7
	ld	de, 0
	ld	(ix - 3), de
	push	ix
	ld	de, -435
	add	ix, de
	ld	(ix), bc
BB15_6:
	pop	ix
	ld	de, (ix - 3)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB15_13
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	push	de
	pop	iy
	inc	iy
	ex	de, hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -407
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	de, -423
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -429
	add	ix, de
	ld	(ix), iy
	pop	ix
	lea	hl, iy
	ld	de, (ix + 12)
BB15_8:
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB15_12
	ld	(ix - 3), de
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, (hl)
	ld	de, -432
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	push	bc
	pop	hl
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (hl)
	ld	bc, -432
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB15_11
	ld	bc, -410
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -410
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	de, (ix + 12)
BB15_11:
	lea	hl, iy
	inc	hl
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 7
	lea	bc, iy
	jp	BB15_8
BB15_12:
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	ld	bc, -429
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	(ix - 3), de
	push	ix
	ld	de, -435
	add	ix, de
	ld	bc, (ix)
	jp	BB15_6
BB15_13:
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(iy + 14), 0
	ld	de, -410
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	hl
	pop	iy
	inc	iy
	ld	bc, 383
	lea	de, iy
	ldir
	ld	de, 1
	ld	iy, (ix + 12)
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	dec	de
	jp	p, BB15_15
	push	de
	pop	iy
BB15_15:
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, 3
	ld	(ix - 3), bc
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy
	ld	bc, -432
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	bc, -429
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	(ix), de
	pop	ix
BB15_16:
	ld	bc, (ix - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_27
	ld	de, -444
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	a, (iy - 1)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -410
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ld	de, (hl)
	inc	de
	ld	(hl), de
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	lea	hl, iy
	ld	de, 67
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jr	nz, BB15_19
	ld	de, -420
	jr	BB15_25
BB15_19:
	lea	hl, iy
	ld	de, 68
	or	a, a
	sbc	hl, de
	jr	nz, BB15_21
	ld	de, -423
	jr	BB15_25
BB15_21:
	lea	hl, iy
	ld	de, 72
	or	a, a
	sbc	hl, de
	jr	nz, BB15_23
	ld	de, -429
	jr	BB15_25
BB15_23:
	lea	hl, iy
	ld	de, 83
	or	a, a
	sbc	hl, de
	jr	nz, BB15_26
	ld	de, -432
BB15_25:
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
BB15_26:
	ld	de, 0
	ld	(ix - 3), bc
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -444
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB15_16
BB15_27:
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(iy + 11), hl
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 8), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 5), hl
	ld	bc, -432
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 2), hl
	ld	bc, 4
	push	de
	pop	hl
	ld	(ix - 3), bc
	ld	bc, -441
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (ix - 3)
BB15_28:
	ld	(ix - 3), de
	push	ix
	ld	de, -420
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB15_31
	ld	hl, (iy)
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB15_32
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, iy + 3
	ld	bc, 4
	jr	BB15_28
BB15_31:
	ld	bc, -463
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB15_33
BB15_32:
	ld	(ix - 3), de
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	hl, _.str.18
	add	hl, bc
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -463
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, (ix - 3)
BB15_33:
	ld	bc, 9
	ld	iy, ___const.get_hand_type.straight_ranks
	push	de
	pop	hl
BB15_34:
	ld	(ix - 3), de
	push	ix
	ld	de, -407
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB15_38
BB15_35:
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB15_39
	lea	hl, iy
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -410
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	bc, 9
	ld	hl, (hl)
	ld	de, (ix - 3)
	inc	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_35
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	inc	iy
	ld	de, 0
	jr	BB15_34
BB15_38:
	ld	bc, -460
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB15_40
BB15_39:
	ld	hl, ___const.get_hand_type.straight_ranks
	push	hl
	pop	iy
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	a, (iy + 4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -460
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 0
BB15_40:
	ld	hl, _.str.19
	ld	bc, -438
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	bc, (iy)
	ld	(ix - 3), de
	push	ix
	ld	de, -450
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 45)
	push	ix
	ld	de, -447
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 42)
	push	ix
	ld	de, -444
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 39)
	push	ix
	ld	de, -441
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, (iy - 36)
	ld	de, -432
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -417
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld.sis	bc, 0
	ld	(iy), c
	ld	(iy + 1), b
	xor	a, a
	ld	bc, -454
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	ld	de, (ix - 3)
	push	de
	pop	bc
	ld	(ix - 3), bc
	push	ix
	ld	bc, -438
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -453
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	bc, (ix - 3)
BB15_41:
	ld	de, -423
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB15_53
	ld	bc, -429
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -410
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	nz, BB15_46
	ld	(ix - 3), de
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	lea	bc, iy
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB15_45
	ld	(ix - 3), de
	ld	de, -457
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	de, (ix - 3)
	ld	(hl), e
BB15_45:
	inc	bc
	ld	de, -429
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	jr	BB15_52
BB15_46:
	lea	hl, iy
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	inc	bc
	jr	nz, BB15_48
	ld	bc, -438
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -414
	jr	BB15_50
BB15_48:
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_51
	ld	bc, -453
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	dec	bc
BB15_50:
	lea	hl, ix
	add	hl, bc
	ld	(hl), e
	push	ix
	ld	de, -429
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -423
	add	ix, de
	ld	bc, (ix)
	pop	ix
	jr	BB15_52
BB15_51:
	ld	de, -429
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, -423
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
BB15_52:
	inc	hl
	jp	BB15_41
BB15_53:
	ld	hl, (ix + 12)
	ld	de, 5
	or	a, a
	sbc	hl, de
	ld	e, -1
	ld	iyl, d
	ld	iyh, e
	jr	z, BB15_55
	ld	iyh, iyl
BB15_55:
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	l, a
	ld	a, iyh
	and	a, l
	ld	bc, -450
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB15_57
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB15_57:
	and	a, l
	ld	bc, -447
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB15_59
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB15_59:
	and	a, l
	ld	bc, -444
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB15_61
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB15_61:
	and	a, l
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	jr	nz, BB15_63
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB15_63:
	and	a, l
	ld	bc, -432
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_65
	ld	e, iyl
BB15_65:
	and	a, e
	ld	b, a
	ld	de, -407
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 9
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, b
	or	a, l
	ld	l, a
	ld	a, iyh
	ex	de, hl
	ld	iyl, e
	ex	de, hl
	and	a, l
	ld	c, a
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, c
	and	a, l
	bit	0, a
	jp	z, BB15_71
	bit	0, b
	jp	nz, BB15_71
	ld	bc, 65
	ld	de, -460
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_71
	ld	de, (ix + 6)
	ld	hl, _hand_table+81
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB15_69:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB15_4
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	bc, iy
	ld	hl, (ix + 9)
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB15_69
BB15_71:
	bit	0, a
	jr	z, BB15_75
	ld	de, (ix + 6)
	ld	hl, _hand_table+72
	ld	bc, 9
	ldir
	ld	de, 35
	ld	iy, 0
BB15_73:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB15_4
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -407
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	bc, iy
	ld	hl, (ix + 9)
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	de, 35
	ld	bc, 7
	add	iy, bc
	jr	BB15_73
BB15_75:
	ld	de, -453
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 9
	jp	nz, BB15_84
	ld	de, -438
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_89
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_89
	ld	de, (ix + 6)
	ld	hl, _hand_table+54
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB15_79:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	dec	bc
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	z, BB15_82
	cp	a, e
	jr	nz, BB15_83
BB15_82:
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB15_83:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB15_79
BB15_84:
	ld	de, (ix + 6)
	ld	hl, _hand_table+63
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB15_85:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	ld	bc, -454
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB15_88
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB15_88:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB15_85
BB15_89:
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	jp	nc, BB15_95
	ld	de, (ix + 6)
	ld	hl, _hand_table+45
	ldir
	ld	hl, (ix + 9)
	ex	de, hl
	inc	de
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB15_91:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	de
	pop	iy
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	ix
	ld	bc, -463
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	jr	nz, BB15_94
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	push	ix
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	dec	hl
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	push	ix
	ld	de, -407
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	ldir
BB15_94:
	lea	iy, iy + 7
	lea	de, iy
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	jp	BB15_91
BB15_95:
	ld	a, iyl
	bit	0, a
	jr	z, BB15_99
	ld	de, (ix + 6)
	ld	hl, _hand_table+36
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
BB15_97:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_4
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	dec	de
	jr	BB15_97
BB15_99:
	ld	de, -438
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_105
	ld	de, (ix + 6)
	ld	hl, _hand_table+27
	ldir
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB15_101:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	push	ix
	dec	bc
	add	ix, bc
	ld	l, (ix)
	pop	ix
	cp	a, l
	jr	nz, BB15_104
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
BB15_104:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB15_101
BB15_105:
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB15_112
	ld	de, (ix + 6)
	ld	hl, _hand_table+18
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	a, (iy + 1)
	ld	bc, -407
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB15_107:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	z, BB15_110
	ld	bc, -407
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	jr	nz, BB15_111
BB15_110:
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB15_111:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB15_107
BB15_112:
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	jp	nz, BB15_118
	ld	de, (ix + 6)
	ld	hl, _hand_table+9
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy)
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
BB15_114:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB15_4
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, e
	jr	nz, BB15_117
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 44)
	ld	a, e
	push	hl
	pop	de
	inc	de
	ld	(iy + 44), de
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	lea	de, iy + 9
	ld	(ix - 3), de
	ld	de, -413
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	hl, iy
	ld	de, (ix - 3)
	ldir
	ld	e, a
BB15_117:
	lea	iy, iy + 7
	ld	bc, -413
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -426
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	dec	hl
	jp	BB15_114
BB15_118:
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table
	ldir
	lea	de, iy + 9
	ld	bc, 7
	ld	(ix - 3), de
	ld	de, -435
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	add	hl, bc
	ld	bc, 7
	ld	de, (ix - 3)
	ldir
	ld	hl, 1
	ld	(iy + 44), hl
	jp	BB15_4
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_playing_hand
_display_playing_hand:
	ld	hl, -12
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, (ix + 12)
	ld	hl, (ix + 15)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 9), iy
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB16_2
	ld	de, 0
BB16_2:
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	bc, 120
BB16_3:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB16_7
	ld	(ix - 12), de
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	(ix - 6), bc
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	hl, (ix - 3)
	ld	bc, 7
	ldir
	ld	hl, (ix - 6)
	ld	(iy + 9), hl
	ld	hl, 100
	ld	(iy + 12), hl
	call	_print_playing_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_card_equal
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB16_6
	ld	iy, (ix - 9)
	ld	hl, (iy + 2)
	ld	de, 76
	push	de
	ld	de, (ix - 6)
	push	de
	push	hl
	call	_print_playing_value
	pop	hl
	pop	hl
	pop	hl
BB16_6:
	ld	iy, (ix - 3)
	lea	iy, iy + 7
	ld	(ix - 3), iy
	ld	de, 32
	ld	hl, (ix - 6)
	add	hl, de
	ld	de, (ix - 12)
	dec	de
	push	hl
	pop	bc
	jr	BB16_3
BB16_7:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handle_draw_scoring
_handle_draw_scoring:
	ld	hl, -27
	call	__frameset
	ld	bc, (ix + 15)
	ld	iy, (ix + 18)
	ld	hl, (iy + 3)
	ld	(ix - 15), hl
	ld	de, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	(ix - 12), bc
	push	bc
	pop	iy
	dec	de
	jp	p, BB17_2
	push	de
	pop	iy
BB17_2:
	ld	hl, 2
	ld	(ix - 18), hl
	lea	hl, ix - 9
	ld	(ix - 21), hl
	ld	hl, (ix - 12)
	dec	hl
	ld	(ix - 12), hl
	ld	bc, (ix - 15)
BB17_3:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB17_7
	ld	(ix - 27), iy
	ld	(ix - 15), de
	ld	de, (ix - 18)
	ld	hl, (ix + 12)
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	(ix - 24), hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (ix + 21)
	push	hl
	call	_display_hand
	pop	hl
	ld	de, (ix - 21)
	ld	hl, (ix + 18)
	ld	bc, 9
	ldir
	ld	hl, (ix - 24)
	ld	(ix - 6), hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_display_playing_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	hl, (ix - 21)
	ld	bc, 9
	ldir
	ld	hl, (ix + 33)
	push	hl
	ld	hl, (ix + 30)
	push	hl
	ld	hl, (ix + 27)
	push	hl
	ld	hl, (ix + 24)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, (ix - 12)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	hl, 500
	jr	z, BB17_6
	ld	hl, 250
BB17_6:
	push	hl
	call	_wait_frames
	pop	hl
	ld	de, (ix - 15)
	inc	de
	ld	bc, 7
	ld	hl, (ix - 18)
	add	hl, bc
	ld	(ix - 18), hl
	ld	bc, (ix - 24)
	ld	iy, (ix - 27)
	jp	BB17_3
BB17_7:
	ld	iy, (ix + 18)
	ld	hl, (iy + 6)
	call	__imulu
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -581
	call	__frameset
	ld	bc, -523
	lea	iy, ix
	add	iy, bc
	ld	hl, 0
	xor	a, a
	push	ix
	ld	bc, -542
	add	ix, bc
	ld	(ix), a
	pop	ix
	ld	de, 8
	push	ix
	ld	bc, -538
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	de, 4
	push	ix
	ld	bc, -551
	add	ix, bc
	ld	(ix), de
	pop	ix
	dec	de
	push	ix
	ld	bc, -548
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -373
	add	ix, bc
	lea	de, ix
	pop	ix
	push	ix
	ld	bc, -535
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 85
	push	ix
	ld	bc, -526
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 47
	push	ix
	ld	bc, -545
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -529
	add	ix, bc
	ld	(ix), iy
	pop	ix
	lea	de, iy
	ld	bc, -541
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	hl
	call	_time
	pop	de
	push	hl
	call	_srand
	pop	hl
	call	_gfx_Begin
	or	a, a
	sbc	hl, hl
BB18_1:
	ld	a, l
	or	a, a
	jp	nz, BB18_12
	call	_kb_Scan
	call	_draw_main_menu
	call	_gfx_SwapDraw
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jr	nz, BB18_5
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	nz, BB18_7
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	ld	hl, 0
	jp	nz, BB18_73
	jr	BB18_11
BB18_5:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jr	z, BB18_9
	call	_kb_Scan
	jr	BB18_5
BB18_7:
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	z, BB18_10
	call	_kb_Scan
	jr	BB18_7
BB18_9:
	ld	hl, 1
	jr	BB18_11
BB18_10:
	ld	hl, 2
BB18_11:
	ld	bc, -532
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	call	_gfx_Wait
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	jp	BB18_1
BB18_12:
	ld	a, l
	cp	a, 2
	jr	nz, BB18_15
BB18_13:
	call	_kb_Scan
	call	_draw_rules_menu
	call	_gfx_SwapDraw
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jp	nz, BB18_73
	call	_gfx_Wait
	jr	BB18_13
BB18_15:
	ld	bc, -532
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_create_deck
	pop	hl
	ld	bc, -535
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_shuffle_deck
	pop	hl
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 3
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 88), 0
	push	hl
	pop	de
	inc	de
	ld	bc, 61
	ldir
	ld	hl, 8
	ld	(iy + 85), hl
	ld	de, 67
	ld	iy, 11
BB18_16:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	z, BB18_18
	lea	bc, iy
	lea	de, iy
	ld	(ix - 3), de
	ld	de, -526
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	add	iy, bc
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	de, (ix - 3)
	push	de
	pop	iy
	ld	de, 67
	ld	bc, 7
	add	iy, bc
	jr	BB18_16
BB18_18:
	or	a, a
	sbc	hl, hl
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 82), hl
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	cp	a, 1
	jp	nz, BB18_73
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 15
	ld	bc, -569
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	or	a, a
	sbc	hl, hl
	push	ix
	ld	bc, -566
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -554
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	de, 1
	push	ix
	ld	bc, -560
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -557
	add	ix, bc
	ld	(ix), hl
	pop	ix
BB18_20:
	bit	0, e
	jp	z, BB18_73
	ld	bc, -532
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (_frame_timer)
	inc	hl
	ld	(_frame_timer), hl
	call	_kb_Scan
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 88)
	push	de
	pop	hl
	ld	(ix - 3), de
	ld	de, -538
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB18_23
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pea	iy + 82
	ld	bc, -535
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	push	hl
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_draw_cards_to_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB18_23:
	ld	hl, -720878
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -572
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	(iy + 14), 1
	ld	de, (ix - 3)
	ld	bc, -563
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	a, e
	bit	5, a
	jp	z, BB18_31
	ld	bc, -554
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	bit	5, a
	jp	nz, BB18_31
	ld	de, -532
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -538
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	a, (iy + 15)
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, (iy + 91)
	bit	0, a
	jr	nz, BB18_28
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB18_28
	ld	bc, -538
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 1
	ld	hl, 1
	jr	BB18_30
BB18_28:
	bit	0, a
	jr	z, BB18_31
	ld	bc, -538
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 0
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	hl, -1
	jp	m, BB18_31
BB18_30:
	add	hl, de
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 91), hl
BB18_31:
	ld	de, -529
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	bc, (iy + 85)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	de, -538
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jp	p, BB18_33
	ld	bc, 0
BB18_33:
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), bc
	ld	bc, -563
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	l, e
	ld	h, d
	push	ix
	ld	de, -554
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	de, -563
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -569
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld	de, 0
BB18_34:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB18_38
	bit	0, (iy)
	jp	z, BB18_37
	lea	hl, iy - 6
	ld	(ix - 3), bc
	push	ix
	ld	bc, -581
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	de
	pop	hl
	inc	hl
	push	ix
	ld	bc, -578
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ex	de, hl
	ld	bc, (ix - 3)
	push	ix
	ld	de, -575
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -545
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ex	de, hl
	ld	bc, -581
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, (ix - 3)
	ld	bc, 7
	ldir
	ld	de, -575
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -578
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB18_37:
	lea	iy, iy + 7
	dec	bc
	jp	BB18_34
BB18_38:
	ld	bc, -575
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	ld	bc, -545
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	hl
	ld	bc, -541
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_get_hand_type
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -720874
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, iyl
	bit	7, a
	jp	z, BB18_47
	ld	bc, -560
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	bit	7, a
	jp	nz, BB18_47
	ld	bc, -560
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, (iy + 91)
	ld	bc, -548
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB18_57
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB18_57
	ld	de, -529
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	de, (iy + 88)
	ld	(ix - 3), bc
	ld	bc, -563
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -569
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB18_43:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB18_59
	bit	0, (iy)
	jr	z, BB18_46
	ld	bc, -1
	ld	(iy - 4), bc
	ld	bc, 1
	ld	(iy), b
	ld	(iy - 1), b
	dec	de
BB18_46:
	lea	iy, iy + 7
	dec	hl
	jr	BB18_43
BB18_47:
	ld	bc, 1
BB18_48:
	ld	hl, -720876
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	a, e
	bit	7, a
	jp	z, BB18_62
	ld	(ix - 3), bc
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	bit	7, a
	ld	bc, (ix - 3)
	jp	nz, BB18_62
	ld	(ix - 3), bc
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -560
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -529
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, (iy + 91)
	ld	bc, -551
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB18_58
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, -538
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	hl, (hl)
	jp	m, BB18_58
	ld	de, -569
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	de, -563
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
BB18_53:
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB18_60
	bit	0, (iy)
	jr	z, BB18_56
	scf
	sbc	hl, hl
	ld	(iy - 4), hl
	ld	(iy), 0
	ld	(iy - 1), 0
	inc	bc
BB18_56:
	lea	iy, iy + 7
	ex	de, hl
	dec	hl
	jr	BB18_53
BB18_57:
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	jp	BB18_48
BB18_58:
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(ix - 3), bc
	jp	BB18_61
BB18_59:
	ld	(ix - 3), bc
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 88), de
	or	a, a
	sbc	hl, hl
	ld	(iy + 91), hl
	ld	de, -548
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	dec	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -560
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	bc, (ix - 3)
	jp	BB18_48
BB18_60:
	or	a, a
	sbc	hl, hl
	ld	de, -529
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy + 91), hl
	ld	de, -563
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -551
	add	ix, de
	ld	bc, (ix)
	pop	ix
	dec	bc
	ld	hl, (iy + 44)
	ld	(ix - 3), bc
	ld	bc, -548
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	ld	bc, (ix - 3)
	push	ix
	ld	de, -551
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	bc
	ld	de, 0
	push	de
	push	ix
	ld	bc, -566
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -526
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -541
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	push	iy
	push	hl
	pea	iy + 9
	ld	bc, -575
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -545
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_handle_draw_scoring
	ld	bc, 1
	ld	iy, 30
	add	iy, sp
	ld	sp, iy
	ld	(ix - 3), bc
	ld	bc, -566
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -529
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 88)
	push	ix
	ld	bc, -563
	add	ix, bc
	ld	de, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	(iy + 88), hl
	ld	bc, -560
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
BB18_61:
	push	ix
	ld	bc, -557
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB18_62:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	1, a
	ld	(ix - 3), bc
	push	ix
	ld	bc, -563
	push	af
	add	ix, bc
	pop	af
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	jr	z, BB18_67
	ld	(ix - 3), bc
	push	ix
	ld	bc, -542
	add	ix, bc
	bit	1, (ix)
	pop	ix
	ld	bc, (ix - 3)
	jr	nz, BB18_67
	ld	(ix - 3), bc
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -532
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	pop	hl
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB18_66
	dec	de
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	bc, -572
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 14), 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
BB18_66:
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -563
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB18_67:
	ld	a, l
	bit	2, a
	jp	z, BB18_72
	ld	bc, -542
	lea	hl, ix
	add	hl, bc
	bit	2, (hl)
	jp	nz, BB18_72
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -538
	add	ix, bc
	ld	de, (ix)
	pop	ix
	dec	de
	ld	(ix - 3), de
	push	ix
	ld	de, -532
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	bc
	pop	hl
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB18_71
	push	bc
	pop	de
	inc	de
	push	bc
	pop	hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	(ix - 3), de
	ld	de, -526
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	ld	(iy + 14), 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld	de, (ix - 3)
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -557
	add	ix, bc
	ld	de, (ix)
	pop	ix
	jr	BB18_72
BB18_71:
	ld	bc, -557
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
BB18_72:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	(ix - 3), de
	ld	de, -560
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	l, e
	ld	h, d
	push	ix
	ld	bc, -557
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -526
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -541
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	bc, -548
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -551
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -566
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 6
	call	__sshru
	call	__snot
	ld.sis	bc, 1
	call	__sand
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	(ix - 3), bc
	ld	bc, -572
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	bc, (ix - 3)
	call	_gfx_SwapDraw
	ld	bc, -572
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	bc, -563
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -542
	add	ix, bc
	ld	(ix), l
	pop	ix
	ld	bc, -532
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	jp	BB18_20
BB18_73:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_frame_timer
_frame_timer:
	rb	3

	section	.data,"aw",@progbits
	public	_hand_table
_hand_table:
	dl	0
	dl	5
	dl	1
	dl	1
	dl	10
	dl	2
	dl	2
	dl	20
	dl	2
	dl	3
	dl	30
	dl	3
	dl	4
	dl	30
	dl	4
	dl	5
	dl	35
	dl	4
	dl	6
	dl	40
	dl	4
	dl	7
	dl	60
	dl	7
	dl	8
	dl	100
	dl	8
	dl	9
	dl	100
	dl	8

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"CALCATRO", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"Press [2nd] to Start", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"Press [Alpha] for rules", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"Press [Clear] to Quit", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	" x ", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"High Card", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"Two Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"Three of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"Straight", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	"Full House", 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"Four of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	"Straight Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"Royal Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	_.str.16
_.str.16:
	db	"H: ", 0

	section	.rodata,"a",@progbits
	private	_.str.17
_.str.17:
	db	" D: ", 0

	section	.rodata,"a",@progbits
	private	_.str.18
_.str.18:
	db	"SHCD", 0

	section	.rodata,"a",@progbits
	private	___const.get_hand_type.straight_ranks
___const.get_hand_type.straight_ranks:
	db	"23456789TJQKA"

	section	.rodata,"a",@progbits
	private	_.str.19
_.str.19:
	db	"23456789TJQKA", 0

	section	.rodata,"a",@progbits
	private	_switch.table.print_hand_type
_switch.table.print_hand_type:
	dl	_.str.5
	dl	_.str.6
	dl	_.str.7
	dl	_.str.8
	dl	_.str.9
	dl	_.str.10
	dl	_.str.11
	dl	_.str.12
	dl	_.str.13
	dl	_.str.14

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	__Unwind_SjLj_Register
	extern	_gfx_PrintChar
	extern	_srand
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	_rand
	extern	__sand
	extern	_gfx_PrintString
	extern	_memcpy
	extern	__sshru
	extern	_gfx_PrintInt
	extern	__idivu
	extern	__setflag
	extern	__bdivu
	extern	_time
	extern	__frameset
	extern	_kb_Scan
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	__irems
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_Wait
	extern	_gfx_PrintStringXY
	extern	_gfx_End
	extern	__snot
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
