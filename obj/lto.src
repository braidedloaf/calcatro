	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_wait_frames
_wait_frames:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
BB0_1:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_3
	ld	(ix - 3), hl
	call	_kb_Scan
	call	_gfx_Wait
	ld	hl, (ix - 3)
	dec	hl
	jr	BB0_1
BB0_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_randomIntRange
_randomIntRange:
	call	__frameset0
	call	_rand
	push	hl
	pop	de
	ld	hl, 1
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, (ix + 9)
	add	iy, bc
	ex	de, hl
	lea	bc, iy
	call	__irems
	ld	de, (ix + 6)
	add	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_shuffle_deck
_shuffle_deck:
	ld	hl, -19
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 7
	lea	hl, ix - 7
	ld	(ix - 13), hl
	ld	de, 364
	lea	hl, iy
	add	hl, de
	ld	de, (hl)
	push	de
	pop	hl
	call	__imulu
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy - 7
	ld	(ix - 10), hl
	ld	de, 2
BB2_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB2_3
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 16), hl
	ld	(ix - 19), bc
	call	_rand
	ld	bc, (ix - 19)
	call	__irems
	ld	(ix - 19), hl
	ld	de, (ix - 13)
	ld	hl, (ix - 10)
	ld	iy, 7
	lea	bc, iy
	ldir
	ld	hl, (ix - 19)
	lea	bc, iy
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (ix - 10)
	lea	hl, iy
	ld	bc, 7
	ldir
	lea	de, iy
	ld	hl, (ix - 13)
	ld	bc, 7
	ldir
	ld	de, 2
	ld	iy, (ix - 10)
	lea	iy, iy - 7
	ld	(ix - 10), iy
	ld	bc, (ix - 16)
	jr	BB2_1
BB2_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_create_deck
_create_deck:
	ld	hl, -24
	call	__frameset
	ld	iy, (ix + 6)
	xor	a, a
	ld	hl, -64
	ld	(ix - 6), hl
	sbc	hl, hl
	lea	bc, iy + 5
	ld	iy, 13
	ld	(ix - 9), bc
	ld	c, iyl
	ld	de, -13
	ld	(ix - 3), de
BB3_1:
	ld	(ix - 13), a
	ld	b, a
	call	__bdivu
	ld	d, a
	ld	(ix - 12), de
	ld	(ix - 19), hl
	lea	bc, iy
	call	__idivu
	lea	de, iy
	push	hl
	pop	iy
	ld	bc, 104
	call	__imulu
	ld	bc, (ix - 6)
	ld	a, c
	sub	a, l
	lea	hl, iy
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	ld	hl, -12
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	push	bc
	pop	hl
	ld	de, 39
	or	a, a
	sbc	hl, de
	jp	z, BB3_17
	ld	(ix - 24), a
	ld	(ix - 23), iy
	ld	hl, (ix - 12)
	mlt	hl
	ld	d, (ix - 13)
	ld	a, d
	add	a, l
	ld	e, a
	add	a, -11
	ld	iyl, a
	ld	(ix - 20), e
	ld	a, e
	cp	a, 8
	jr	nc, BB3_4
	ld	a, d
	add	a, l
	add	a, 50
	jr	BB3_8
BB3_4:
	push	bc
	pop	hl
	ld	de, (ix - 16)
	add	hl, de
	ld	de, 17
	add	hl, de
	ld	de, 3
	or	a, a
	sbc	hl, de
	jr	nc, BB3_6
	ld	hl, 5327444
	ld	c, (ix - 24)
	call	__ishru
	ld	a, l
	jr	BB3_8
BB3_6:
	ld	a, iyl
	or	a, a
	ld	a, 75
	jr	z, BB3_8
	ld	a, 65
BB3_8:
	ld	iy, (ix - 9)
	ld	(iy - 5), a
	ld	hl, (ix - 23)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 83
	jr	c, BB3_12
	ld	hl, (ix - 3)
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 72
	jr	c, BB3_12
	ld	hl, (ix - 3)
	ld	de, -13
	add	hl, de
	ld	de, 13
	or	a, a
	sbc	hl, de
	ld	a, 67
	jr	c, BB3_12
	ld	a, 68
BB3_12:
	ld	iy, (ix - 9)
	ld	(iy - 4), a
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	push	hl
	pop	iy
	ld	de, 27
	add	iy, de
	ld	de, -13
	or	a, a
	sbc	hl, de
	ld	hl, 11
	jr	z, BB3_14
	ld	hl, 10
BB3_14:
	ld	a, (ix - 20)
	cp	a, 8
	lea	bc, iy
	jr	c, BB3_16
	push	hl
	pop	bc
BB3_16:
	ld	iy, (ix - 9)
	ld	(iy - 3), bc
	ld	(iy), 0
	ld	(iy + 1), 0
	lea	de, iy
	ld	hl, (ix - 19)
	inc	hl
	ld	bc, (ix - 3)
	inc	bc
	ld	(ix - 3), bc
	ld	a, (ix - 13)
	inc	a
	ld	bc, 8
	ld	iy, (ix - 6)
	add	iy, bc
	ld	(ix - 6), iy
	push	de
	pop	iy
	lea	iy, iy + 7
	ld	(ix - 9), iy
	ld	de, (ix - 12)
	ld	c, 13
	ld	iy, 13
	jp	BB3_1
BB3_17:
	ld	de, 364
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	add	iy, de
	ld	de, 52
	ld	(iy), de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_card
_print_card:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 15)
	ld	de, (ix + 18)
	ld	l, (ix + 11)
	bit	0, l
	jr	nz, BB4_3
	ld	a, (ix + 12)
	or	a, a
	jr	nz, BB4_3
	push	de
	push	iy
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	jr	BB4_8
BB4_3:
	ld	e, 62
	ld	c, 60
	ld	a, l
	xor	a, 1
	bit	0, a
	ld	l, e
	jr	nz, BB4_5
	ld	l, c
BB4_5:
	ld	(ix - 3), bc
	ld	(ix - 6), hl
	ld	bc, -8
	bit	0, a
	jr	nz, BB4_7
	ld	l, e
	ld	(ix - 3), hl
BB4_7:
	lea	hl, iy
	add	hl, bc
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (ix + 18)
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix + 6)
	ld	l, a
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	l, (ix + 7)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	de, 16
	ld	hl, (ix + 15)
	add	hl, de
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
BB4_8:
	push	hl
	call	_gfx_PrintChar
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_stats
_print_hand_stats:
	call	__frameset0
	ld	de, (ix + 15)
	ld	hl, (ix + 18)
	ld	bc, 16
	add	hl, bc
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix + 9)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (ix + 12)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_print_hand_type
_print_hand_type:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 6
	ld	(ix - 3), hl
	ld	hl, (ix + 15)
	ld	de, (ix + 18)
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	de, (ix + 6)
	ld	bc, 10
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB6_2
	ld	iy, _switch.table.print_hand_type
	ld	bc, 3
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	jr	BB6_3
BB6_2:
	ld	hl, _.str.11
BB6_3:
	push	hl
	call	_gfx_PrintString
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, (ix + 15)
	ld	(iy + 9), hl
	ld	hl, (ix + 18)
	ld	(iy + 12), hl
	call	_print_hand_stats
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_game_stats
_display_game_stats:
	ld	hl, -3
	call	__frameset
	lea	hl, ix + 18
	ld	(ix - 3), hl
	ld	de, 10
	ld	hl, 20
	push	hl
	push	de
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 36
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 52
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.12
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.13
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	bc, 9
	lea	de, iy
	ld	hl, (ix - 3)
	ldir
	ld	hl, 10
	ld	(iy + 9), hl
	ld	hl, 78
	ld	(iy + 12), hl
	call	_print_hand_type
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_display_hand
_display_hand:
	ld	hl, -12
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, 74
	ld	(ix - 6), hl
	ld	bc, 0
	lea	hl, iy + 9
	ld	(ix - 3), hl
BB8_1:
	ld	de, (iy + 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB8_6
	ld	(ix - 9), bc
	ld	iy, (ix - 3)
	bit	0, (iy + 5)
	jr	nz, BB8_4
	bit	0, (iy + 6)
	ld	hl, 200
	jr	z, BB8_5
BB8_4:
	ld	hl, 184
BB8_5:
	ld	(ix - 12), hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	lea	hl, iy
	ld	(ix - 3), hl
	ld	iy, 0
	add	iy, sp
	lea	de, iy
	ld	bc, 7
	ldir
	ld	hl, (ix - 6)
	ld	(iy + 9), hl
	ld	hl, (ix - 12)
	ld	(iy + 12), hl
	call	_print_card
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 32
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
	lea	iy, iy + 7
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	jr	BB8_1
BB8_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_cards_to_hand
_draw_cards_to_hand:
	ld	hl, -9
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB9_2
	ld	de, 0
BB9_2:
	ld	iy, (ix + 6)
	lea	hl, iy + 11
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	push	de
	pop	iy
	push	hl
	pop	bc
BB9_3:
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	z, BB9_14
	ld	(ix - 9), bc
	lea	bc, iy
	ld	(ix - 3), bc
BB9_5:
	ld	hl, (ix + 15)
	ld	hl, (hl)
	ld	de, 52
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB9_7
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 15)
	ld	(iy), hl
	ld	hl, (ix + 12)
	push	hl
	call	_shuffle_deck
	pop	hl
BB9_7:
	ld	hl, (ix + 6)
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB9_9
	ld	de, 0
BB9_9:
	ld	iy, (ix - 6)
BB9_10:
	ld	bc, (ix - 3)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB9_5
	ld	hl, (iy)
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jr	z, BB9_13
	lea	iy, iy + 7
	dec	de
	jr	BB9_10
BB9_13:
	lea	de, iy - 2
	ld	hl, (ix + 15)
	push	hl
	pop	iy
	ld	hl, (iy)
	push	hl
	pop	bc
	inc	bc
	ld	(iy), bc
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	add	hl, bc
	ld	bc, 7
	ldir
	ld	iy, (ix - 3)
	ld	bc, (ix - 9)
	inc	bc
	jp	BB9_3
BB9_14:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	de, (ix + 9)
	add	hl, de
	ld	(iy + 3), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_get_hand_type
_get_hand_type:
	ld	hl, -441
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, (ix + 12)
	ld	bc, 9
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_2
	ld	hl, ___const.get_hand_type.empty_hand
	lea	de, iy
	jp	BB10_79
BB10_2:
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), bc
	ld	bc, -408
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	iy, -6
	ex	de, hl
	lea	de, iy
	add	hl, de
	ld	de, -4
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jr	nc, BB10_4
	ld	iy, (ix + 6)
	lea	de, iy
	ld	hl, _hand_table
	jp	BB10_79
BB10_4:
	ld	de, -195
	lea	hl, ix
	add	hl, de
	ld	de, -432
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -402
	lea	iy, ix
	add	iy, de
	lea	hl, iy + 12
	push	ix
	ld	de, -405
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	lea	hl, iy
	ld	de, -423
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	bc, (ix + 12)
	dec	bc
	ld	iy, (ix + 9)
	lea	iy, iy + 7
	ld	de, 0
BB10_5:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB10_12
	ld	(ix - 3), de
	ld	de, -426
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -411
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	de, (ix - 3)
	push	de
	pop	iy
	inc	iy
	ex	de, hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	add	hl, de
	push	ix
	ld	de, -417
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -411
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	ix
	ld	de, -429
	add	ix, de
	ld	(ix), iy
	pop	ix
	lea	hl, iy
	ld	de, (ix + 12)
BB10_7:
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB10_11
	ld	(ix - 3), de
	ld	de, -417
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, (hl)
	ld	de, -435
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	push	bc
	pop	hl
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (hl)
	ld	bc, -435
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB10_10
	ld	bc, -405
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -417
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	bc, -420
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	ix
	ld	bc, -405
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	bc, 7
	ldir
	ld	de, (ix + 12)
BB10_10:
	lea	hl, iy
	inc	hl
	ld	bc, -420
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 7
	lea	bc, iy
	jp	BB10_7
BB10_11:
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	ld	bc, -429
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	(ix - 3), de
	push	ix
	ld	de, -426
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ld	de, (ix - 3)
	jp	BB10_5
BB10_12:
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(iy + 12), 0
	ld	de, -405
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	hl
	pop	iy
	inc	iy
	ld	bc, 383
	lea	de, iy
	ldir
	ld	de, 1
	ld	iy, (ix + 12)
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	dec	de
	jp	p, BB10_14
	push	de
	pop	iy
BB10_14:
	ld	hl, (ix + 9)
	inc	hl
	push	ix
	ld	bc, -411
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, 3
	ld	(ix - 3), bc
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -417
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	(ix), de
	pop	ix
BB10_15:
	ld	bc, (ix - 3)
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_26
	ld	de, -435
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	ld	de, -411
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	a, (iy - 1)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -405
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ld	de, (hl)
	inc	de
	ld	(hl), de
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	lea	hl, iy
	ld	de, 67
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jr	nz, BB10_18
	ld	de, -417
	jr	BB10_24
BB10_18:
	lea	hl, iy
	ld	de, 68
	or	a, a
	sbc	hl, de
	jr	nz, BB10_20
	ld	de, -420
	jr	BB10_24
BB10_20:
	lea	hl, iy
	ld	de, 72
	or	a, a
	sbc	hl, de
	jr	nz, BB10_22
	ld	de, -426
	jr	BB10_24
BB10_22:
	lea	hl, iy
	ld	de, 83
	or	a, a
	sbc	hl, de
	jr	nz, BB10_25
	ld	de, -429
BB10_24:
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
BB10_25:
	ld	de, 0
	ld	(ix - 3), bc
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 7
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -435
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	dec	iy
	jp	BB10_15
BB10_26:
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	push	ix
	ld	bc, -420
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(iy + 9), hl
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 6), hl
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy), hl
BB10_27:
	push	de
	pop	iy
	lea	hl, iy
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	z, BB10_29
	ld	de, -423
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	hl, (hl)
	push	ix
	ld	de, -411
	add	ix, de
	ld	(ix), hl
	pop	ix
	lea	de, iy
	inc	de
	lea	hl, iy
	push	bc
	pop	iy
	lea	iy, iy + 3
	push	ix
	ld	bc, -423
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	pop	iy
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, (ix + 12)
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_27
BB10_29:
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	ld	bc, 9
	ld	iy, ___const.get_hand_type.straight_ranks
	ld	de, 0
	push	de
	pop	hl
BB10_30:
	ld	(ix - 3), de
	push	ix
	ld	de, -411
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jr	z, BB10_34
BB10_31:
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB10_35
	lea	hl, iy
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	push	ix
	ld	de, -405
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	ld	bc, 9
	ld	hl, (hl)
	ld	de, (ix - 3)
	inc	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_31
	ld	de, -411
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	inc	iy
	ld	de, 0
	jr	BB10_30
BB10_34:
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	jr	BB10_36
BB10_35:
	ld	hl, ___const.get_hand_type.straight_ranks
	push	hl
	pop	iy
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	a, (iy + 4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -441
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 0
BB10_36:
	ld	bc, -432
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy)
	push	ix
	ld	bc, -438
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy - 45)
	push	ix
	ld	bc, -435
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy - 42)
	push	ix
	ld	bc, -429
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy - 39)
	push	ix
	ld	bc, -426
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy - 36)
	ld	bc, -423
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, 3
	ld	(ix - 3), bc
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -432
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	iy, _.str.14
	ld	bc, (ix - 3)
BB10_37:
	ld	e, (iy)
	ld	a, e
	or	a, a
	jp	z, BB10_48
	ld	(ix - 3), bc
	ld	bc, -417
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	ld	bc, -405
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy
	ld	de, 2
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jr	nz, BB10_41
	ld	de, -408
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
BB10_40:
	ld	de, -417
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	jr	BB10_46
BB10_41:
	lea	hl, iy
	ld	de, 3
	or	a, a
	sbc	hl, de
	jr	nz, BB10_43
	ld	de, -414
	jr	BB10_45
BB10_43:
	lea	hl, iy
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	nz, BB10_47
	ld	de, -432
BB10_45:
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -408
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -417
	add	ix, de
	ld	iy, (ix)
	pop	ix
BB10_46:
	push	ix
	ld	de, -408
	add	ix, de
	ld	(ix), hl
	pop	ix
	inc	iy
	jp	BB10_37
BB10_47:
	ld	de, -408
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	jr	BB10_40
BB10_48:
	ld	hl, (ix + 12)
	ld	de, 5
	or	a, a
	sbc	hl, de
	ld	iy, (ix + 6)
	jp	nz, BB10_74
	ld	bc, -411
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	de, 9
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	bc, -438
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	e, -1
	ld	c, d
	ld	l, e
	jr	nz, BB10_51
	ld	l, c
BB10_51:
	and	a, l
	ld	(ix - 3), bc
	ld	bc, -435
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	ld	bc, (ix - 3)
	jr	nz, BB10_53
	ld	l, c
BB10_53:
	and	a, l
	ld	(ix - 3), bc
	ld	bc, -429
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	ld	bc, (ix - 3)
	jr	nz, BB10_55
	ld	l, c
BB10_55:
	and	a, l
	ld	(ix - 3), bc
	ld	bc, -426
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, e
	ld	bc, (ix - 3)
	jr	nz, BB10_57
	ld	l, c
BB10_57:
	and	a, l
	ld	(ix - 3), bc
	ld	bc, -423
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 3)
	jr	nz, BB10_59
	ld	e, c
BB10_59:
	and	a, e
	ld	b, a
	ld	de, -411
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 9
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, b
	or	a, l
	ld	c, a
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	l, a
	ld	a, c
	and	a, l
	bit	0, a
	jr	z, BB10_63
	bit	0, b
	jr	nz, BB10_63
	ld	de, 65
	ld	(ix - 3), bc
	ld	bc, -441
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jr	nz, BB10_63
	lea	de, iy
	ld	hl, _hand_table+81
	jp	BB10_78
BB10_63:
	bit	0, a
	jr	z, BB10_65
	lea	de, iy
	ld	hl, _hand_table+72
	jp	BB10_78
BB10_65:
	ld	de, -432
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_69
	ld	de, -414
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	ix
	ld	de, -408
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix)
	pop	ix
	jr	z, BB10_70
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB10_70
	lea	de, iy
	ld	hl, _hand_table+54
	jr	BB10_78
BB10_69:
	lea	de, iy
	ld	hl, _hand_table+63
	jr	BB10_78
BB10_70:
	ld	de, -420
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	nc, BB10_72
	lea	de, iy
	ld	hl, _hand_table+45
	jr	BB10_78
BB10_72:
	bit	0, c
	jr	z, BB10_74
	lea	de, iy
	ld	hl, _hand_table+36
	jr	BB10_78
BB10_74:
	ld	bc, -414
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_77
	ld	bc, -408
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_80
	lea	de, iy
	ld	hl, _hand_table+9
	jr	BB10_78
BB10_77:
	lea	de, iy
	ld	hl, _hand_table+27
BB10_78:
	ld	bc, 9
BB10_79:
	ldir
	lea	hl, iy
	ld	sp, ix
	pop	ix
	ret
BB10_80:
	ex	de, hl
	ld	de, 2
	or	a, a
	sbc	hl, de
	jr	nz, BB10_82
	lea	de, iy
	ld	hl, _hand_table+18
	jr	BB10_78
BB10_82:
	lea	de, iy
	ld	hl, _hand_table
	jr	BB10_78
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handle_draw_scoring
_handle_draw_scoring:
	ld	hl, -24
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, (ix + 12)
	ld	bc, (iy + 3)
	ex	de, hl
	ld	de, 1
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB11_2
	ld	de, 0
	ld	(ix - 12), de
BB11_2:
	lea	hl, ix - 9
	ld	(ix - 21), hl
	lea	hl, ix - 9
	ld	(ix - 18), hl
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB11_3:
	ld	hl, (ix - 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB11_5
	ld	hl, (iy)
	add	hl, bc
	ld	(ix - 15), hl
	scf
	sbc	hl, hl
	push	hl
	ld	(ix - 24), iy
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	call	_display_hand
	pop	hl
	ld	iy, (ix - 21)
	lea	de, iy
	ld	hl, (ix + 12)
	ld	bc, 9
	ldir
	ld	hl, (ix - 15)
	ld	(ix - 6), hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	lea	hl, iy
	ld	bc, 9
	ldir
	ld	hl, (ix + 27)
	push	hl
	ld	hl, (ix + 24)
	push	hl
	ld	hl, (ix + 21)
	push	hl
	ld	hl, (ix + 18)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, 250
	push	hl
	call	_wait_frames
	ld	iy, (ix - 24)
	pop	hl
	lea	iy, iy + 7
	ld	hl, (ix - 12)
	dec	hl
	ld	(ix - 12), hl
	ld	bc, (ix - 15)
	jp	BB11_3
BB11_5:
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	ld	hl, (iy + 6)
	call	__imulu
	ld	(ix - 12), hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	call	_display_hand
	pop	hl
	ld	iy, (ix - 18)
	lea	de, iy
	ld	hl, (ix + 12)
	ld	bc, 9
	ldir
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, 9
	lea	hl, iy
	ldir
	ld	hl, (ix + 27)
	push	hl
	ld	hl, (ix + 24)
	push	hl
	ld	hl, (ix + 21)
	push	hl
	ld	hl, (ix + 18)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	call	_gfx_SwapDraw
	ld	hl, 500
	push	hl
	call	_wait_frames
	pop	hl
	ld	hl, (ix - 12)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -546
	call	__frameset
	ld	bc, -485
	lea	iy, ix
	add	iy, bc
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	hl, 0
	ld	de, 4
	push	ix
	ld	bc, -519
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	de, 11
	push	ix
	ld	bc, -494
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	de, 3
	push	ix
	ld	bc, -516
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 112
	push	ix
	ld	bc, -500
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 47
	push	ix
	ld	bc, -491
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy + 9
	push	ix
	ld	bc, -506
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy
	ld	bc, -503
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	hl
	call	_time
	pop	de
	push	hl
	call	_srand
	pop	hl
	call	_gfx_Begin
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -500
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_create_deck
	pop	hl
	ld	bc, -500
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_shuffle_deck
	pop	hl
	ld	bc, -491
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 3
	ld	bc, -488
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 50), 0
	push	hl
	pop	de
	inc	de
	ld	bc, 61
	ldir
	ld	hl, 8
	ld	bc, -497
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	ix
	ld	bc, -488
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	(iy + 47), hl
	ld	de, 67
BB12_1:
	ld	bc, -494
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jr	z, BB12_3
	ld	bc, -494
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	bc
	ld	(ix - 3), de
	ld	de, -491
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	scf
	sbc	hl, hl
	ld	(iy), hl
	ld	de, (ix - 3)
	ex	de, hl
	ld	de, 67
	ld	bc, 7
	add	hl, bc
	ld	bc, -494
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	jr	BB12_1
BB12_3:
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	or	a, a
	sbc	hl, hl
	ld	(iy + 44), hl
	ld	bc, -491
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	de, iy + 15
	ld	bc, -528
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	bc, -513
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	pop	iy
	push	ix
	ld	bc, -525
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -510
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	pop	de
	xor	a, a
	ld	c, a
	inc	l
BB12_4:
	ld	a, l
	and	a, 1
	bit	0, a
	jp	z, BB12_57
	ld	(ix - 3), de
	push	ix
	ld	de, -534
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	de, -522
	lea	iy, ix
	add	iy, de
	ld	(iy), c
	ld	de, (ix - 3)
	push	ix
	ld	bc, -494
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -507
	add	ix, bc
	ld	(ix), l
	pop	ix
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (_frame_timer)
	inc	hl
	ld	(_frame_timer), hl
	call	_kb_Scan
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 50)
	push	de
	pop	hl
	ld	(ix - 3), de
	ld	de, -497
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	de, (ix - 3)
	jp	p, BB12_7
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	bc, -488
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pea	iy + 44
	ld	bc, -500
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	push	hl
	ld	bc, -491
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_draw_cards_to_hand
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB12_7:
	ld	hl, -720878
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	bc, -494
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -491
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -540
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	(iy + 14), 1
	ld	de, (ix - 3)
	ld	bc, -531
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	a, e
	bit	5, a
	jp	z, BB12_15
	ld	bc, -510
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	bit	5, a
	jp	nz, BB12_15
	ld	de, -494
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	de, -491
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	push	ix
	ld	bc, -497
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	a, (iy + 15)
	ld	bc, -488
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, (iy + 53)
	bit	0, a
	jr	nz, BB12_12
	push	de
	pop	hl
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB12_12
	ld	bc, -497
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 1
	ld	hl, 1
	jr	BB12_14
BB12_12:
	bit	0, a
	jr	z, BB12_15
	ld	bc, -497
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 15), 0
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	hl, -1
	jp	m, BB12_15
BB12_14:
	add	hl, de
	ld	bc, -488
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 53), hl
BB12_15:
	ld	de, -488
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	bc, (iy + 47)
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	de, -497
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jp	p, BB12_17
	ld	bc, 0
BB12_17:
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), bc
	ld	bc, -531
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	l, e
	ld	h, d
	push	ix
	ld	de, -510
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	de, -537
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -528
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld	de, 0
BB12_18:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB12_22
	bit	0, (iy)
	jp	z, BB12_21
	lea	hl, iy - 6
	ld	(ix - 3), bc
	push	ix
	ld	bc, -546
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	de
	pop	hl
	inc	hl
	push	ix
	ld	bc, -543
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ex	de, hl
	ld	bc, (ix - 3)
	push	ix
	ld	de, -531
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, 7
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -506
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ex	de, hl
	ld	bc, -546
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, (ix - 3)
	ld	bc, 7
	ldir
	ld	de, -531
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -543
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB12_21:
	lea	iy, iy + 7
	dec	bc
	jp	BB12_18
BB12_22:
	ld	bc, -543
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	ld	bc, -506
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	hl
	ld	bc, -503
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_get_hand_type
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -720874
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	bc, -531
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	jp	z, BB12_31
	ld	bc, -513
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	a, e
	bit	7, a
	jr	nz, BB12_31
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 53)
	ld	bc, -516
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_31
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_31
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 50)
	ld	bc, -537
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -528
	add	ix, bc
	ld	iy, (ix)
	pop	ix
BB12_27:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB12_41
	bit	0, (iy)
	jr	z, BB12_30
	ld	bc, -1
	ld	(iy - 4), bc
	ld	(iy), 0
	ld	(iy - 1), 0
	dec	de
BB12_30:
	lea	iy, iy + 7
	dec	hl
	jr	BB12_27
BB12_31:
	ld	de, -497
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	ld	bc, -534
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
BB12_32:
	ld	bc, (ix - 3)
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	(ix - 3), bc
	ld	bc, -534
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	ld	bc, (ix - 3)
	jp	z, BB12_44
	ld	a, e
	bit	7, a
	jp	nz, BB12_44
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 53)
	ld	bc, -519
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_43
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_43
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, (iy + 50)
	ld	bc, -528
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	push	ix
	ld	bc, -537
	add	ix, bc
	ld	hl, (ix)
	pop	ix
BB12_37:
	push	hl
	pop	bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB12_42
	bit	0, (iy)
	jr	z, BB12_40
	scf
	sbc	hl, hl
	ld	(iy - 4), hl
	ld	(iy), 0
	ld	(iy - 1), 0
	dec	de
BB12_40:
	lea	iy, iy + 7
	push	bc
	pop	hl
	dec	hl
	jr	BB12_37
BB12_41:
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 50), de
	or	a, a
	sbc	hl, hl
	ld	(iy + 53), hl
	ld	de, -516
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	dec	hl
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -497
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -534
	add	ix, bc
	ld	de, (ix)
	pop	ix
	jp	BB12_32
BB12_42:
	ld	bc, -488
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 50), de
	or	a, a
	sbc	hl, hl
	ld	(iy + 53), hl
	ld	bc, -519
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	dec	de
	ld	(ix - 3), de
	push	ix
	ld	de, -516
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	bc
	ld	de, (ix - 3)
	push	ix
	ld	bc, -519
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	de
	push	hl
	ld	bc, -525
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -491
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -503
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -543
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -506
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_handle_draw_scoring
	ld	iy, 24
	add	iy, sp
	ld	sp, iy
	ld	bc, -525
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	push	ix
	ld	de, -525
	add	ix, de
	ld	(ix), hl
	pop	ix
BB12_43:
	ld	de, -497
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
BB12_44:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, iyl
	ld	de, -522
	lea	hl, ix
	add	hl, de
	bit	1, a
	jr	nz, BB12_46
	ld	l, (hl)
	jr	BB12_50
BB12_46:
	ld	l, (hl)
	bit	1, l
	jr	nz, BB12_50
	ld	bc, -494
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB12_49
	dec	de
	ld	bc, -494
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	de, -540
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy + 14), 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
BB12_49:
	ld	de, -522
	lea	hl, ix
	add	hl, de
	ld	l, (hl)
	push	ix
	ld	de, -497
	add	ix, de
	ld	bc, (ix)
	pop	ix
BB12_50:
	ld	a, iyl
	bit	2, a
	push	ix
	ld	de, -537
	push	af
	add	ix, de
	pop	af
	ld	(ix), iy
	pop	ix
	jr	z, BB12_54
	bit	2, l
	jr	nz, BB12_54
	push	bc
	pop	de
	dec	de
	ld	(ix - 3), de
	ld	de, -494
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB12_54
	push	bc
	pop	de
	inc	de
	push	bc
	pop	hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -491
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	ld	(iy + 14), 0
	ld	de, (ix - 3)
	ld	bc, -494
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
BB12_54:
	ld	bc, -491
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_hand
	pop	hl
	push	hl
	push	hl
	push	hl
	ex	de, hl
	ld	hl, 0
	add	hl, sp
	ex	de, hl
	ld	bc, -503
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 9
	ldir
	ld	bc, -516
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -519
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -525
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_display_game_stats
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB12_56
	xor	a, a
	ld	bc, -507
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
BB12_56:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	push	bc
	pop	de
	ld	(ix - 3), bc
	ld	bc, -531
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	e, l
	ld	d, h
	ld	bc, -513
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	de, -534
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	ld	bc, (ix - 3)
	ld	c, l
	ld	b, h
	ld	de, -522
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	call	_gfx_SwapDraw
	ld	de, -522
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -537
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	c, l
	ld	de, -507
	lea	hl, ix
	add	hl, de
	ld	l, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -494
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	bc, (ix - 3)
	jp	BB12_4
BB12_57:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_frame_timer
_frame_timer:
	rb	3

	section	.data,"aw",@progbits
	public	_hand_table
_hand_table:
	dl	0
	dl	5
	dl	1
	dl	1
	dl	10
	dl	2
	dl	2
	dl	20
	dl	2
	dl	3
	dl	30
	dl	3
	dl	4
	dl	30
	dl	4
	dl	5
	dl	35
	dl	4
	dl	6
	dl	40
	dl	4
	dl	7
	dl	60
	dl	7
	dl	8
	dl	100
	dl	8
	dl	9
	dl	100
	dl	8

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	" x ", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"High Card", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"Two Pair", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"Three of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"Straight", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"Full House", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"Four of a Kind", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"Straight Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"Royal Flush", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"H: ", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	" D: ", 0

	section	.rodata,"a",@progbits
	private	___const.get_hand_type.empty_hand
___const.get_hand_type.empty_hand:
	dl	16777215
	dl	0
	dl	0

	section	.rodata,"a",@progbits
	private	___const.get_hand_type.straight_ranks
___const.get_hand_type.straight_ranks:
	db	"23456789TJQKA"

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"23456789TJQKA", 0

	section	.rodata,"a",@progbits
	private	_switch.table.print_hand_type
_switch.table.print_hand_type:
	dl	_.str.1
	dl	_.str.2
	dl	_.str.3
	dl	_.str.4
	dl	_.str.5
	dl	_.str.6
	dl	_.str.7
	dl	_.str.8
	dl	_.str.9
	dl	_.str.10

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	__Unwind_SjLj_Register
	extern	_gfx_PrintChar
	extern	_srand
	extern	_gfx_Begin
	extern	_rand
	extern	_gfx_PrintString
	extern	_gfx_PrintInt
	extern	__idivu
	extern	__setflag
	extern	_time
	extern	__bdivu
	extern	__frameset
	extern	_kb_Scan
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	_gfx_FillScreen
	extern	__irems
	extern	__Unwind_SjLj_Unregister
	extern	__imulu
	extern	_gfx_Wait
	extern	_gfx_SetColor
	extern	_gfx_End
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextScale
